import{_ as e,r as o,o as c,c as i,a as n,b as t,d as p,e as s}from"./app-f6817a80.js";const l={},u=s(`<h1 id="python数据处理" tabindex="-1"><a class="header-anchor" href="#python数据处理" aria-hidden="true">#</a> Python数据处理</h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><h3 id="mapreduce" tabindex="-1"><a class="header-anchor" href="#mapreduce" aria-hidden="true">#</a> MapReduce</h3><p>MapReduce是一种用于处理大规模数据集的编程模型和算法。它将数据处理过程分为两个阶段：Map（映射）和Reduce（归约）。</p><p>Map阶段：</p><ol><li>输入数据被分割成若干个大小相等的数据块。</li><li>每个数据块由多个Map任务并行处理。</li><li>每个Map任务对输入数据块中的每个元素应用一个用户自定义的Map函数，生成键-值对。</li><li>Map函数的输出键-值对被暂存到一个中间数据结构中。</li></ol><p>Reduce阶段：</p><ol><li>所有Map任务的输出键-值对被根据键进行分组，形成多个键-值对的列表。</li><li>每个Reduce任务对每个键及其对应的值列表应用一个用户自定义的Reduce函数，生成最终的结果键-值对。</li><li>Reduce任务的输出结果被存储到持久化存储介质中，供后续处理或查询使用。</li></ol><p>整个MapReduce流程的基本步骤如下：</p><ol><li>输入数据的切割和分发。</li><li>并行执行Map任务，对每个输入数据块应用Map函数，生成键-值对。</li><li>对Map函数的输出进行中间结果的合并和排序。</li><li>并行执行Reduce任务，对每个键及其对应的值列表应用Reduce函数，生成最终结果。</li><li>将Reduce任务的输出结果存储到持久化存储介质中。</li></ol><p>通过将数据切分、并行化处理和结果合并等步骤结合在一起，MapReduce提供了一种高效处理大规模数据集的方法，并在分布式计算环境中具有可扩展性和容错性。它被广泛应用于大数据处理、数据分析和机器学习等领域。</p><blockquote><p>Python示例</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict

<span class="token comment"># 输入数据</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>

<span class="token comment"># Map函数</span>
<span class="token keyword">def</span> <span class="token function">mapper</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 以键-值对形式输出</span>
    <span class="token keyword">return</span> value <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span> value

<span class="token comment"># Reduce函数</span>
<span class="token keyword">def</span> <span class="token function">reducer</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 对值进行累加求和</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span>

<span class="token comment"># 执行MapReduce</span>
<span class="token keyword">def</span> <span class="token function">map_reduce</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 初始化结果字典</span>
    result <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>

    <span class="token comment"># Map阶段</span>
    <span class="token keyword">for</span> value <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        key<span class="token punctuation">,</span> mapped_value <span class="token operator">=</span> mapper<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>mapped_value<span class="token punctuation">)</span>

    <span class="token comment"># Reduce阶段</span>
    final_result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> values <span class="token keyword">in</span> result<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        final_result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> reducer<span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span>

    <span class="token keyword">return</span> final_result

<span class="token comment"># 调用MapReduce函数</span>
output <span class="token operator">=</span> map_reduce<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，输入数据<code>data</code>是一个包含整数的列表。<code>mapper</code>函数将每个输入值映射为键-值对，键是奇偶性，值是输入值本身。<code>reducer</code>函数对具有相同键的值列表进行求和操作。<code>map_reduce</code>函数首先执行Map阶段，将数据映射为键-值对并按键进行分组。然后执行Reduce阶段，对每个键及其对应的值列表应用Reduce函数，生成最终结果。最后，输出结果将以字典形式打印出来。</p><p>请注意，上述示例是一个简化的MapReduce流程，用于说明基本概念。在实际应用中，需要考虑更多的细节，如数据切割、分布式环境下的并行执行和结果合并等。</p><h2 id="字符串处理" tabindex="-1"><a class="header-anchor" href="#字符串处理" aria-hidden="true">#</a> 字符串处理</h2><h3 id="基本处理" tabindex="-1"><a class="header-anchor" href="#基本处理" aria-hidden="true">#</a> 基本处理</h3><h4 id="大小写" tabindex="-1"><a class="header-anchor" href="#大小写" aria-hidden="true">#</a> 大小写</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> string

name <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token comment"># 首字母大写</span>
name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;Hello World&#39;</span>
<span class="token comment"># 全部大写</span>
name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;HELLO WORLD&#39;</span>
<span class="token comment"># 全部小写</span>
name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token comment"># capwords使用split将参数分解为单词</span>
<span class="token comment"># 可选参数seq=None时,将空格字符替换为单个空格，并删除开头和结尾的空格,否则将使用sep拆分和合并单词</span>
sentence <span class="token operator">=</span> <span class="token string">&#39;Python is one of the best programming languages.&#39;</span>
string<span class="token punctuation">.</span>capwords<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;Python Is One Of The Best Programming Languages.&#39;</span>
string<span class="token punctuation">.</span>capwords<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;Python is one of the best progRamming langUagEs.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空白处理" tabindex="-1"><a class="header-anchor" href="#空白处理" aria-hidden="true">#</a> 空白处理</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name<span class="token operator">=</span><span class="token string">&quot; hello world &quot;</span>
<span class="token comment"># 删除右边空白</span>
name<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot; hello world&quot;</span>
<span class="token comment"># 删除左边空白</span>
name<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;hello world &quot;</span>
<span class="token comment"># 删除全部空白</span>
name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;hello world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>message <span class="token operator">=</span> <span class="token string">&quot;I like python&quot;</span>
message<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;I like go&#39;</span>


<span class="token comment"># 单字符串替换</span>
table <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">&#39;cs&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;kz&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;this is an incredible test&#39;</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> thiz iz an inkredible tezt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式处理" tabindex="-1"><a class="header-anchor" href="#格式处理" aria-hidden="true">#</a> 格式处理</h3><h4 id="宽度和精度" tabindex="-1"><a class="header-anchor" href="#宽度和精度" aria-hidden="true">#</a> 宽度和精度</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;Pi day is {pi:10.2f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pi<span class="token operator">=</span>pi<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;     3.14&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="符号对齐和填充" tabindex="-1"><a class="header-anchor" href="#符号对齐和填充" aria-hidden="true">#</a> 符号对齐和填充</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 居中</span>
<span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;   hello.  &#39;</span>
<span class="token string">&quot;hello&quot;</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;***hello***&#39;</span>

<span class="token comment"># 用0填充</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{:010.2f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0000003.14</span>
<span class="token comment"># 左对齐，居中和右对齐</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0:&lt;10.2f}\\n{0:^10.2f}\\n{0:&gt;10.2f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3.14</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>    <span class="token number">3.14</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>       <span class="token number">3.14</span>
<span class="token comment"># 填充字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{:@^20}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> @@@@@@@Hello@@@@@@@@
<span class="token comment"># 添加正负号</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0:-.2}\\n{1:-.2}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3.1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">3.1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0:+.2}\\n{1:+.2}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">+</span><span class="token number">3.1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">3.1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0: .2}\\n{1: .2}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3.1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">3.1</span>
<span class="token comment"># 进制前缀</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{:b}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10110</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{:#b}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0b10110</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="格式规约" tabindex="-1"><a class="header-anchor" href="#格式规约" aria-hidden="true">#</a> 格式规约</h4><p>在Python中，格式规约使用在字符串的<code>format</code>方法中，用于将数据插入到指定位置并按照特定的格式显示。下面列举了常用的格式规约：</p><ol><li><code>{}</code>: 无格式规约，直接将参数插入到字符串中，默认使用左对齐。</li><li><code>{:&lt;width}</code>: 左对齐，字段宽度为<code>width</code>。</li><li><code>{:&gt;width}</code>: 右对齐，字段宽度为<code>width</code>。</li><li><code>{:^width}</code>: 居中对齐，字段宽度为<code>width</code>。</li><li><code>{:.precisionf}</code>: 将浮点数显示为小数点后精度为<code>precision</code>的浮点数。</li><li><code>{:.widthf}</code>: 浮点数显示为字段宽度为<code>width</code>的浮点数，不指定精度时，默认保留小数点后6位。</li><li><code>{:.widthe}</code>: 浮点数以指数形式显示，字段宽度为<code>width</code>。</li><li><code>{:.widthg}</code>: 浮点数根据值的大小自动选择以小数点或指数形式显示，字段宽度为<code>width</code>。</li><li><code>{:#x}</code>: 整数显示为十六进制，并以小写字母表示。</li><li><code>{:#X}</code>: 整数显示为十六进制，并以大写字母表示。</li><li><code>{:#o}</code>: 整数显示为八进制。</li><li><code>{:#b}</code>: 整数显示为二进制。</li><li><code>{:widthd}</code>: 整数显示为字段宽度为<code>width</code>的十进制数。</li><li><code>{:widthb}</code>: 整数显示为字段宽度为<code>width</code>的二进制数。</li><li><code>{:widtho}</code>: 整数显示为字段宽度为<code>width</code>的八进制数。</li><li><code>{:widthx}</code>: 整数显示为字段宽度为<code>width</code>的十六进制数（小写字母表示）。</li><li><code>{:widthX}</code>: 整数显示为字段宽度为<code>width</code>的十六进制数（大写字母表示）。</li></ol><h3 id="可变字符串" tabindex="-1"><a class="header-anchor" href="#可变字符串" aria-hidden="true">#</a> 可变字符串</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b&#39;Hello&#39;</span><span class="token punctuation">)</span>
x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">b&#39;u&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b&#39;Hullo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符处理" tabindex="-1"><a class="header-anchor" href="#字符处理" aria-hidden="true">#</a> 字符处理</h2><h3 id="字母顺序值" tabindex="-1"><a class="header-anchor" href="#字母顺序值" aria-hidden="true">#</a> 字母顺序值</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> A
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">65</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查找某一字符索引</span>
<span class="token builtin">str</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本转换" tabindex="-1"><a class="header-anchor" href="#基本转换" aria-hidden="true">#</a> 基本转换</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 二进制</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:b}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">101010</span>
<span class="token comment"># Unicode码点</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:c}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> A
<span class="token comment"># 十进制</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:d}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">1</span>
<span class="token comment"># 科学计数法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:e}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">190000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">1.900000e+05</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:E}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">190000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">1.900000E+05</span>
<span class="token comment"># 定点数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:.4f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">239.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">239.2300</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:.4F}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">239.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">239.2300</span>
<span class="token comment"># 自动定点数或科学计数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:g}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">239.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">239.23</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:G}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">239.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">239.23</span>
<span class="token comment"># 八进制</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:o}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">309</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">465</span>
<span class="token comment"># 字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:s}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">123</span>
<span class="token comment"># 十六进制</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:x}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">232</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> e8
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:X}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">232</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> E8
<span class="token comment"># 百分比</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number is {num:%}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> The number <span class="token keyword">is</span> <span class="token number">80.000000</span><span class="token operator">%</span>
<span class="token comment"># 千位分隔符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{:.5}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># 1,000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 0-9</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>digits<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0123456789</span>
<span class="token comment"># ascll字母</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模版" tabindex="-1"><a class="header-anchor" href="#模版" aria-hidden="true">#</a> 模版</h2><h3 id="string模版" tabindex="-1"><a class="header-anchor" href="#string模版" aria-hidden="true">#</a> <strong>string</strong>模版</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> string

values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;var&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">}</span>
t <span class="token operator">=</span> string<span class="token punctuation">.</span>Template<span class="token punctuation">(</span>
  	<span class="token triple-quoted-string string">&quot;&quot;&quot;
    Variable        : $var
    Escape          : $$
    Variable in text: \${var}iable
    &quot;&quot;&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;TEMPLATE:&#39;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 该函数可以安全的提供参数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;TEMPLATE&#39;</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>safe_substitute<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span>输出
<span class="token triple-quoted-string string">&quot;&quot;&quot;
TEMPLATE: 
    Variable        : foo
    Escape          : $
    Variable in text: fooiable
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模版-1" tabindex="-1"><a class="header-anchor" href="#模版-1" aria-hidden="true">#</a> **%**模版</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Variable        : %(var)s
    Escape          : %%
    Variable in text: %(var)siable
    &quot;&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;INTERPOLATION:&#39;</span><span class="token punctuation">,</span> s <span class="token operator">%</span> values<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span>输出
<span class="token triple-quoted-string string">&quot;&quot;&quot;
INTERPOLATION: 
    Variable        : foo
    Escape          : %
    Variable in text: fooiable
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="format模版" tabindex="-1"><a class="header-anchor" href="#format模版" aria-hidden="true">#</a> <strong>format</strong>模版</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Variable        : {var}
        Escape          : {{}}
        Variable in text: {var}iable
        &quot;&quot;&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;FORMAT:&#39;</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span>输出
<span class="token triple-quoted-string string">&quot;&quot;&quot;
FORMAT: 
        Variable        : foo
        Escape          : {}
        Variable in text: fooiable
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表模版" tabindex="-1"><a class="header-anchor" href="#列表模版" aria-hidden="true">#</a> 列表模版</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用列表</span>
fullname <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Alfred&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Smoketoomuch&quot;</span><span class="token punctuation">]</span>
<span class="token string">&quot;Mr{name[1]}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span>fullname<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Mr Smoketoomuch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典模版" tabindex="-1"><a class="header-anchor" href="#字典模版" aria-hidden="true">#</a> 字典模版</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>phonebook <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Beth&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;9102&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;2341&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Cecil\`s phone number is {Beth}.&quot;</span><span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>phonebook<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Cecil\`s phone number <span class="token keyword">is</span> <span class="token number">9102.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法属性模版" tabindex="-1"><a class="header-anchor" href="#方法属性模版" aria-hidden="true">#</a> 方法属性模版</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math
tmpl <span class="token operator">=</span> <span class="token string">&quot;The {mod.__name__} module defines the value {mod.pi} for π&quot;</span>
tmpl<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mod<span class="token operator">=</span>math<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;the math module defines the value 3.1415926 for π&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文本处理" tabindex="-1"><a class="header-anchor" href="#文本处理" aria-hidden="true">#</a> 文本处理</h2><h3 id="读取文本" tabindex="-1"><a class="header-anchor" href="#读取文本" aria-hidden="true">#</a> 读取文本</h3><h4 id="全部读取" tabindex="-1"><a class="header-anchor" href="#全部读取" aria-hidden="true">#</a> 全部读取</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
  contents <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="逐行读取" tabindex="-1"><a class="header-anchor" href="#逐行读取" aria-hidden="true">#</a> 逐行读取</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 逐行读取，一次性打印</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;text.txt&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>
  <span class="token keyword">for</span> line <span class="token keyword">in</span> file_object<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 逐行读取，按行打印</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">.</span>txt<span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>
  lines <span class="token operator">=</span> file_object<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入文本" tabindex="-1"><a class="header-anchor" href="#写入文本" aria-hidden="true">#</a> 写入文本</h3><h4 id="写入空文件" tabindex="-1"><a class="header-anchor" href="#写入空文件" aria-hidden="true">#</a> 写入空文件</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>
  file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;I love programming&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写入多行" tabindex="-1"><a class="header-anchor" href="#写入多行" aria-hidden="true">#</a> 写入多行</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>
  file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;I love programming\\n&quot;</span><span class="token punctuation">)</span>
  file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;I love programming\\n&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="追加写入" tabindex="-1"><a class="header-anchor" href="#追加写入" aria-hidden="true">#</a> 追加写入</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>
  file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;I love programming&quot;</span><span class="token punctuation">)</span>
  
<span class="token comment"># 在文件开头追加写入</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;go1.md&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r+&quot;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token comment"># 读取旧数据</span>
        old <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 移动指针到开头</span>
        f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment"># 写入新数据</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># 写入旧数据</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>old<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式处理-textwrap" tabindex="-1"><a class="header-anchor" href="#格式处理-textwrap" aria-hidden="true">#</a> 格式处理:textwrap</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> textwrap
sample_text <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;
    The textwrap module can be used to format text for output in
    situations where pretty-printing is desired .It offers
    programmatic functionality similar to the paragraph wrapping
    or filling features found in many text editors
    &#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sample_text<span class="token punctuation">)</span>
<span class="token comment"># 指定缩进宽度</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>sample_text<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 去除缩进</span>
dedented_text <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>dedent<span class="token punctuation">(</span>sample_text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dedented_text<span class="token punctuation">)</span>
<span class="token comment"># 添加前缀文本</span>
dedented_text <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>dedent<span class="token punctuation">(</span>sample_text<span class="token punctuation">)</span>
wrapped <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>dedented_text<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
wrapped <span class="token operator">+=</span> <span class="token string">&#39;\\n\\nSecond paragraph after a blank line.&#39;</span>
final <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>indent<span class="token punctuation">(</span>wrapped<span class="token punctuation">,</span><span class="token string">&#39;&gt; &#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>final<span class="token punctuation">)</span>
<span class="token comment"># 条件添加前缀 为包含偶数个字符的行添加前缀</span>
<span class="token keyword">def</span> <span class="token function">should_indent</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Indent {!r}?&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>
dedented_text <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>dedent<span class="token punctuation">(</span>sample_text<span class="token punctuation">)</span>
wrapped <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>dedented_text<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
final <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>indext<span class="token punctuation">(</span>wrapped<span class="token punctuation">,</span><span class="token string">&#39;EVEN&#39;</span><span class="token punctuation">,</span>predicate<span class="token operator">=</span>should_indent<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>final<span class="token punctuation">)</span>

<span class="token comment"># 悬挂缩进</span>
dedented_text <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>dedent<span class="token punctuation">(</span>sample_text<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>dedented_text<span class="token punctuation">,</span>initial_indent<span class="token operator">=</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>subsequent_indent<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 
<span class="token operator">*</span>The textwrap module can be used to <span class="token builtin">format</span> text
    <span class="token keyword">for</span> output <span class="token keyword">in</span> situations where pretty<span class="token operator">-</span>printing
    <span class="token keyword">is</span> desired <span class="token punctuation">.</span>It offers programmatic
    functionality similar to the paragraph
    wrapping <span class="token keyword">or</span> filling features found <span class="token keyword">in</span> many
    text editors
<span class="token comment"># 截断</span>
dedented_text <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>dedent<span class="token punctuation">(</span>sample_text<span class="token punctuation">)</span>
original <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>dedented_text<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
shortened <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>shorten<span class="token punctuation">(</span>original<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>
shortened_wrapped <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>shortened<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>shortened_wrapped<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h2><h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h3><h4 id="列表复制" tabindex="-1"><a class="header-anchor" href="#列表复制" aria-hidden="true">#</a> 列表复制</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
lis_copy <span class="token operator">=</span> lis<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加元素" tabindex="-1"><a class="header-anchor" href="#添加元素" aria-hidden="true">#</a> 添加元素</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 在结尾插入值</span>
lis<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token comment"># 在指定位置插入值</span>
lis<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 追加列表</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素" aria-hidden="true">#</a> 删除元素</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># 直接删除指定index元素</span>
<span class="token keyword">del</span> lis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 弹出结尾元素</span>
s <span class="token operator">=</span> lis<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span> lis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 弹出指定位置元素</span>
s <span class="token operator">=</span> lis<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token number">2</span> lis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># 只删除第一个指定元素，多次删除需要循环</span>
s <span class="token operator">=</span> lis<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token operator">=</span><span class="token string">&quot;hello world&quot;</span> lis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 永久排序</span>
lis<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 永久排序 反转</span>
lis<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># 临时排序</span>
lis<span class="token punctuation">.</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 反转列表</span>
lis<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建列表" tabindex="-1"><a class="header-anchor" href="#创建列表" aria-hidden="true">#</a> 创建列表</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建空列表</span>
<span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查找-1" tabindex="-1"><a class="header-anchor" href="#查找-1" aria-hidden="true">#</a> 查找</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取指定元素下标</span>
<span class="token builtin">list</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token comment"># 查找最大值最小值及其索引</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> data<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代" aria-hidden="true">#</a> 迭代</h4><ol><li><p>普通遍历</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token comment"># 直接遍历</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> lis<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 序号遍历</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 获取索引和值遍历</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>并行迭代</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;anne&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;beth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;george&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;damon&quot;</span><span class="token punctuation">]</span>
ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> age <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;is&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">&quot;years old&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> anne <span class="token keyword">is</span> <span class="token number">12</span> years old
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> beth <span class="token keyword">is</span> <span class="token number">45</span> years old
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> george <span class="token keyword">is</span> <span class="token number">32</span> years old
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> damon <span class="token keyword">is</span> <span class="token number">102</span> years old
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>迭代索引</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> index<span class="token punctuation">,</span>string <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>string<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">0</span> a
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> a
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> c
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> b
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4</span> d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="列表方法" tabindex="-1"><a class="header-anchor" href="#列表方法" aria-hidden="true">#</a> 列表方法</h3><h4 id="基本方法" tabindex="-1"><a class="header-anchor" href="#基本方法" aria-hidden="true">#</a> 基本方法</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 最小值</span>
<span class="token builtin">min</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token comment"># 最大值</span>
<span class="token builtin">max</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span>
<span class="token comment"># 求和</span>
<span class="token builtin">sum</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">6</span>
<span class="token comment"># 计算指定元素出现次数</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 清空列表</span>
<span class="token builtin">list</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 列表转字符串</span>
<span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表推导" tabindex="-1"><a class="header-anchor" href="#列表推导" aria-hidden="true">#</a> 列表推导</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lis <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> lis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token comment"># 简单推导</span>
lis1 <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span>
lis2 <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span>
lis3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token keyword">if</span> y<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于作用域问题</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># := 海象运算符可以让last在列表推导式作用域范围外使用</span>
codes <span class="token operator">=</span> <span class="token punctuation">[</span>last <span class="token operator">:=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span> <span class="token comment"># [97, 98, 99]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token comment"># &gt;&gt;&gt; 99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表拆分" tabindex="-1"><a class="header-anchor" href="#列表拆分" aria-hidden="true">#</a> 列表拆分</h4><div class="custom-container tip"><p class="custom-container-title">提示</p><p>以下方法能够等分一个列表</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 列表等分</span>
<span class="token keyword">def</span> <span class="token function">list_of_groups</span><span class="token punctuation">(</span>list_info<span class="token punctuation">,</span>per_list_len<span class="token punctuation">)</span><span class="token punctuation">:</span>
    list_of_group <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span>list_info<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">*</span>per_list_len<span class="token punctuation">)</span>
    end_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> list_of_group<span class="token punctuation">]</span>
    count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>list_info<span class="token punctuation">)</span><span class="token operator">%</span>per_list_len
    end_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list_info<span class="token punctuation">[</span><span class="token operator">-</span>count<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> count<span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">else</span> end_list
    <span class="token keyword">return</span> end_list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h2><h3 id="基本操作-1" tabindex="-1"><a class="header-anchor" href="#基本操作-1" aria-hidden="true">#</a> 基本操作</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 清空字段</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 浅复制</span>
newdict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 深复制</span>
newdict <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除元素-1" tabindex="-1"><a class="header-anchor" href="#删除元素-1" aria-hidden="true">#</a> 删除元素</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取指定键值对，并将键值删除</span>
d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>
<span class="token comment"># 随机弹出</span>
d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加元素-1" tabindex="-1"><a class="header-anchor" href="#添加元素-1" aria-hidden="true">#</a> 添加元素</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 如果不存在则添加</span>
d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
d<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;s&#39;</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="更新元素" tabindex="-1"><a class="header-anchor" href="#更新元素" aria-hidden="true">#</a> 更新元素</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span>
d<span class="token punctuation">.</span>update<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建字典" tabindex="-1"><a class="header-anchor" href="#创建字典" aria-hidden="true">#</a> 创建字典</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># dict函数创建</span>
items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Gumby&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Gumby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span>
<span class="token comment"># 创建新字典，并包含指定字段</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token boolean">None</span><span class="token punctuation">}</span>
<span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">&#39;(unknown)&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;(unknown)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;(unknow)&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典方法" tabindex="-1"><a class="header-anchor" href="#字典方法" aria-hidden="true">#</a> 字典方法</h3><h4 id="字典遍历" tabindex="-1"><a class="header-anchor" href="#字典遍历" aria-hidden="true">#</a> 字典遍历</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">}</span>
<span class="token comment"># 遍历key和值</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> dic<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token comment"># 遍历key</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>
<span class="token comment"># 遍历值</span>
<span class="token keyword">for</span> v <span class="token keyword">in</span> dic<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token comment"># 顺序遍历</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字典解析" tabindex="-1"><a class="header-anchor" href="#字典解析" aria-hidden="true">#</a> 字典解析</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字段去重" tabindex="-1"><a class="header-anchor" href="#字段去重" aria-hidden="true">#</a> 字段去重</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>dicts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
	<span class="token string">&quot;c&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment"># 这里只会打印独一无二的值</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>dicts<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊字典" tabindex="-1"><a class="header-anchor" href="#特殊字典" aria-hidden="true">#</a> 特殊字典</h3><h4 id="有序字典" tabindex="-1"><a class="header-anchor" href="#有序字典" aria-hidden="true">#</a> 有序字典</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrdereDict
test <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>

test<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
test<span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
test<span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>

<span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> test<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路径" tabindex="-1"><a class="header-anchor" href="#路径" aria-hidden="true">#</a> 路径</h2><h3 id="目录处理" tabindex="-1"><a class="header-anchor" href="#目录处理" aria-hidden="true">#</a> 目录处理</h3><blockquote><p>获取根目录</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&#39;HOME&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> C<span class="token punctuation">:</span>\\Users\\xxx
<span class="token keyword">print</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expandvars<span class="token punctuation">(</span><span class="token string">&#39;$HOME&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> C<span class="token punctuation">:</span>\\Users\\xxx
<span class="token keyword">print</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> C<span class="token punctuation">:</span>\\Users\\xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>获取当前目录</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span>  os
<span class="token keyword">print</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#获取当前工作目录路径</span>
<span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token comment">#获取当前工作目录路径</span>
<span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span> <span class="token comment">#获取当前目录文件下的工作目录路径</span>
<span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span> <span class="token comment">#获取当前工作的父目录 ！注意是父目录路径</span>
<span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span> <span class="token comment">#获取当前工作目录路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>路径文件名分解</p></blockquote><p>你可以使用Python的<code>os.path.split()</code>函数来将文件路径分解为目录和文件名。这样可以将文件和文件夹分开。</p><p>以下是一个示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> os

file_path <span class="token operator">=</span> <span class="token string">&quot;/Users/wangyifan/Desktop/WorkSpace/项目/个人/NFT_LiuXi/代码/fingerprint_browser_automation_tool_v1/src/data1/db/db.so&quot;</span>

directory<span class="token punctuation">,</span> filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Directory:&quot;</span><span class="token punctuation">,</span> directory<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Filename:&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>os.path.split()</code> 函数会将文件路径分解为目录和文件名，分别存储在 <code>directory</code> 和 <code>filename</code> 变量中。这样你就可以得到文件和文件夹分开的结果。</p><h3 id="路径处理" tabindex="-1"><a class="header-anchor" href="#路径处理" aria-hidden="true">#</a> 路径处理</h3><blockquote><p>创建路径</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建目录</span>
os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token comment"># 创建多层目录</span>
os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多层目录</p></blockquote><p>如果你想在 Python 中级联创建文件夹，可以使用 <code>os.makedirs()</code> 函数。这个函数可以递归地创建多层文件夹，确保路径上的所有文件夹都被创建。</p><p>以下是一个使用 <code>os.makedirs()</code> 创建文件夹的示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> os

<span class="token comment"># 创建多层文件夹</span>
folder_path <span class="token operator">=</span> <span class="token string">&quot;parent_folder/child_folder/subfolder&quot;</span>
os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder_path<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>os.makedirs()</code> 函数会将 <code>folder_path</code> 中的多层文件夹递归地创建出来。参数 <code>exist_ok=True</code> 表示如果文件夹已经存在，不会引发错误。</p><p>如果你需要根据不同的路径创建文件夹，可以使用 <code>os.path.join()</code> 来级联创建路径，然后再使用 <code>os.makedirs()</code> 创建文件夹。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> os

<span class="token comment"># 通过级联创建路径并创建文件夹</span>
folder_name <span class="token operator">=</span> <span class="token string">&quot;parent_folder&quot;</span>
subfolder_name <span class="token operator">=</span> <span class="token string">&quot;child_folder&quot;</span>
folder_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>folder_name<span class="token punctuation">,</span> subfolder_name<span class="token punctuation">)</span>

os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder_path<span class="token punctuation">,</span> exist_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在当前工作目录下创建 <code>parent_folder/child_folder</code> 结构的文件夹。</p><blockquote><p>路径拼接</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取路径分割符</span>
os<span class="token punctuation">.</span>seq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件" aria-hidden="true">#</a> 文件</h2><h3 id="路径处理-1" tabindex="-1"><a class="header-anchor" href="#路径处理-1" aria-hidden="true">#</a> 路径处理</h3><blockquote><p>获取文件路径</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">for</span> root<span class="token punctuation">,</span>dirs<span class="token punctuation">,</span>files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>file_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token comment"># 当前目录路径</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token comment"># 当前路径下的所有子目录</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token comment"># 当前路径下的所有非目录文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>获取文件和文件列表</p></blockquote><p>你可以使用Python的<code>os</code>模块来获取指定目录下的文件和文件夹列表，然后筛选出你需要的log文件。以下是一个示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> os

<span class="token keyword">def</span> <span class="token function">get_log_files</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">:</span>
    log_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 遍历目录下的所有文件和文件夹</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">:</span>
        item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>directory<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        
        <span class="token comment"># 判断是否为文件并且以 &quot;.log&quot; 结尾</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>item_path<span class="token punctuation">)</span> <span class="token keyword">and</span> item<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&quot;.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            log_files<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item_path<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> log_files

<span class="token comment"># 指定目录</span>
directory_path <span class="token operator">=</span> <span class="token string">&quot;/path/to/your/directory&quot;</span>
log_files <span class="token operator">=</span> get_log_files<span class="token punctuation">(</span>directory_path<span class="token punctuation">)</span>

<span class="token comment"># 打印获取到的log文件列表</span>
<span class="token keyword">for</span> log_file <span class="token keyword">in</span> log_files<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>log_file<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>&quot;/path/to/your/directory&quot;</code> 替换为你实际的目录路径。这段代码会遍历指定目录下的所有文件和文件夹，然后筛选出以 &quot;.log&quot; 结尾的文件，并将这些文件的路径存储在 <code>log_files</code> 列表中。最后，打印出获取到的log文件列表。</p><blockquote><p>文件目录判定</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 判断文件是否存在</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 判断是否是文件</span>
os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件处理库" tabindex="-1"><a class="header-anchor" href="#文件处理库" aria-hidden="true">#</a> 文件处理库</h3><h4 id="pathlib" tabindex="-1"><a class="header-anchor" href="#pathlib" aria-hidden="true">#</a> pathlib</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

my_file <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&quot;/path/to/file&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> my_file<span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定的文件存在</span>
<span class="token keyword">if</span> my_file<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定的目录存在</span>
<span class="token keyword">if</span> my_file<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定的文件或目录存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据转换" tabindex="-1"><a class="header-anchor" href="#数据转换" aria-hidden="true">#</a> 数据转换</h2><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 序列化</span>
<span class="token keyword">import</span> json
numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
filename <span class="token operator">=</span> <span class="token string">&quot;numbers.json&quot;</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
  json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>numers<span class="token punctuation">,</span>f<span class="token punctuation">)</span>
<span class="token comment"># 反序列化</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
  numbers <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整数转换函数" tabindex="-1"><a class="header-anchor" href="#整数转换函数" aria-hidden="true">#</a> 整数转换函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 转二进制</span>
<span class="token builtin">bin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 转十六进制</span>
<span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token comment"># 转八进制</span>
<span class="token builtin">oct</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据验证" tabindex="-1"><a class="header-anchor" href="#数据验证" aria-hidden="true">#</a> 数据验证</h2><h3 id="验证url格式" tabindex="-1"><a class="header-anchor" href="#验证url格式" aria-hidden="true">#</a> 验证URL格式</h3><p>你可以使用 Python 的标准库 <code>urllib.parse</code> 来验证一个 URL 是否格式正确。具体来说，你可以使用 <code>urlsplit</code> 函数来分割 URL，如果 URL 格式正确，就能成功分割。以下是一个简单的示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlsplit

<span class="token keyword">def</span> <span class="token function">is_valid_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">.</span>scheme<span class="token punctuation">,</span> result<span class="token punctuation">.</span>netloc<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 判断 scheme 和 netloc 是否都存在</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token comment"># 测试</span>
url1 <span class="token operator">=</span> <span class="token string">&quot;https://www.example.com&quot;</span>
url2 <span class="token operator">=</span> <span class="token string">&quot;not_a_valid_url&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>is_valid_url<span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_valid_url<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这个方法只是验证 URL 的格式是否正确，但不能保证 URL 是真实可访问的。</p><h2 id="数据方法" tabindex="-1"><a class="header-anchor" href="#数据方法" aria-hidden="true">#</a> 数据方法</h2><h3 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数" aria-hidden="true">#</a> 随机数</h3><h4 id="随机整数" tabindex="-1"><a class="header-anchor" href="#随机整数" aria-hidden="true">#</a> 随机整数</h4><p>在 Python 中，你可以使用 <code>random</code> 模块的 <code>randint()</code> 函数来获取指定范围内的随机整数。<code>randint()</code> 函数需要两个参数，一个是随机数的下界，另一个是上界。它将返回这个范围内的一个随机整数，包括上界和下界。</p><p>以下是一个例子，生成一个 1 到 10（包括 1 和 10）之间的随机整数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> random

random_number <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>random_number<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次你运行这段代码，<code>random_number</code> 都会被赋予一个 1 到 10 之间的随机整数。</p><h2 id="时间" tabindex="-1"><a class="header-anchor" href="#时间" aria-hidden="true">#</a> 时间</h2><h3 id="生成时间" tabindex="-1"><a class="header-anchor" href="#生成时间" aria-hidden="true">#</a> 生成时间</h3><h4 id="生成16位时间戳" tabindex="-1"><a class="header-anchor" href="#生成16位时间戳" aria-hidden="true">#</a> 生成16位时间戳</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_time_stamp16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 生成16时间戳  eg:1540281250399895  -ln</span>
    datetime_now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>datetime_now<span class="token punctuation">)</span>

    <span class="token comment"># 10位，时间点相当于从UNIX TIME的纪元时间开始的当年时间编号</span>
    date_stamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>datetime_now<span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 6位，微秒</span>
    data_microsecond <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">&quot;%06d&quot;</span><span class="token operator">%</span>datetime_now<span class="token punctuation">.</span>microsecond<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>date_stamp<span class="token punctuation">,</span>data_microsecond<span class="token punctuation">)</span>
    date_stamp <span class="token operator">=</span> date_stamp<span class="token operator">+</span>data_microsecond
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>date_stamp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间格式转换" tabindex="-1"><a class="header-anchor" href="#时间格式转换" aria-hidden="true">#</a> 时间格式转换</h3><h4 id="_16位时间戳转日期" tabindex="-1"><a class="header-anchor" href="#_16位时间戳转日期" aria-hidden="true">#</a> 16位时间戳转日期</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">stampToTime</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    datatime <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    datatime <span class="token operator">=</span> datatime<span class="token operator">+</span><span class="token string">&#39;.&#39;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> datatime
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串转13位时间戳" tabindex="-1"><a class="header-anchor" href="#字符串转13位时间戳" aria-hidden="true">#</a> 字符串转13位时间戳</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字符串时间转13位时间戳</span>
<span class="token keyword">def</span> <span class="token function">reserve_time</span><span class="token punctuation">(</span>time_str<span class="token punctuation">)</span><span class="token punctuation">:</span>
    datetime_obj <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>time_str<span class="token punctuation">,</span><span class="token string">&quot;%Y-%m-%d&quot;</span><span class="token punctuation">)</span>
    datetime_stamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>datetime_obj<span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    datetime_microsecond <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">&quot;%06d&quot;</span><span class="token operator">%</span>datetime_obj<span class="token punctuation">.</span>microsecond<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    date_stamp <span class="token operator">=</span> datetime_stamp<span class="token operator">+</span>datetime_microsecond
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>date_stamp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串转时间" tabindex="-1"><a class="header-anchor" href="#字符串转时间" aria-hidden="true">#</a> 字符串转时间</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字符串转时间</span>
times <span class="token operator">=</span> <span class="token string">&quot;2022-01-01 11:11:11&quot;</span>
times <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>times<span class="token punctuation">,</span><span class="token string">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间计算" tabindex="-1"><a class="header-anchor" href="#时间计算" aria-hidden="true">#</a> 时间计算</h3><h4 id="差值" tabindex="-1"><a class="header-anchor" href="#差值" aria-hidden="true">#</a> 差值</h4><p>在 Python 中，你可以使用 <code>datetime</code> 模块来比较时间和当前时间的差值。以下是一些示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime

<span class="token comment"># 获取当前时间</span>
current_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 比较时间差值</span>
time_difference <span class="token operator">=</span> current_time <span class="token operator">-</span> your_time

<span class="token comment"># 获取差值的总秒数</span>
total_seconds <span class="token operator">=</span> time_difference<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 获取差值的天数</span>
days <span class="token operator">=</span> time_difference<span class="token punctuation">.</span>days

<span class="token comment"># 获取差值的小时数</span>
hours <span class="token operator">=</span> time_difference<span class="token punctuation">.</span>seconds <span class="token operator">//</span> <span class="token number">3600</span>

<span class="token comment"># 获取差值的分钟数</span>
minutes <span class="token operator">=</span> <span class="token punctuation">(</span>time_difference<span class="token punctuation">.</span>seconds <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">60</span>

<span class="token comment"># 获取差值的秒数</span>
seconds <span class="token operator">=</span> time_difference<span class="token punctuation">.</span>seconds <span class="token operator">%</span> <span class="token number">60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，你需要将 <code>your_time</code> 替换为你要比较的时间（可以是 <code>datetime</code> 对象或具有相同格式的字符串）。然后，通过计算 <code>current_time - your_time</code> 获取时间差值。</p><p>你可以使用 <code>total_seconds()</code> 方法获取时间差值的总秒数，或使用 <code>.days</code> 属性获取时间差值的天数。此外，你还可以通过计算秒数除以 3600（小时）、60（分钟）和取模操作来获取具体的小时、分钟和秒数。</p><p>需要注意的是，上述示例中的差值是相对于当前时间的差值。如果你需要比较两个具体时间点之间的差值，你可以将其中一个时间点替换为另一个时间点，并按照相同的方法进行比较。</p><h4 id="加减日期" tabindex="-1"><a class="header-anchor" href="#加减日期" aria-hidden="true">#</a> 加减日期</h4><p>要获取当前日期，并将其加一天，你可以使用 <code>datetime</code> 模块来实现。以下是一个示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta

current_date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
next_day <span class="token operator">=</span> current_date <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>next_day<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们首先使用 <code>datetime.now()</code> 获取当前的日期和时间，然后使用 <code>.date()</code> 方法提取出当前的日期部分。</p><p>接下来，我们使用 <code>timedelta(days=1)</code> 创建一个时间增量对象，表示一天的时间间隔。将这个时间增量对象与当前日期相加，即可得到当前日期加一天的结果。</p><p>最后，我们将计算得到的结果打印出来。你可以根据需要进一步处理或使用该日期。</p><p>需要注意的是，计算后的结果是一个 <code>datetime.date</code> 对象，表示日期部分，时间部分为 00:00:00。如果你需要包含时间部分，可以使用 <code>datetime</code> 对象并根据需要进行设置</p><h2 id="图像" tabindex="-1"><a class="header-anchor" href="#图像" aria-hidden="true">#</a> 图像</h2>`,197),r={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"网站资源",-1),k={href:"https://www.osgeo.cn/python-tutorial/imgs.html",target:"_blank",rel:"noopener noreferrer"},m=s(`<h3 id="查看图片" tabindex="-1"><a class="header-anchor" href="#查看图片" aria-hidden="true">#</a> 查看图片</h3><p>使用函数 <code>cv2.imread()</code> 读入图像。</p><ul><li><code>cv2.IMREAD_COLOR</code> ：读入一副彩色图像。图像的透明度会被忽略，这是默认参数。</li><li><code>cv2.IMREAD_GRAYSCALE</code> ：以灰度模式读入图像</li><li><code>cv2.IMREAD_UNCHANGED</code> ：读入一幅图像，并且包括图像的 alpha 通道（RGBA）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> cv2
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span> <span class="token string">&#39;./img/img2.png&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样使用matplotlit库进行查看</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://typoras.oss-cn-hangzhou.aliyuncs.com/typora_images/imgs-opencv_4_0.png" alt="_images/imgs-opencv_4_0.png"></p><p>可以看出，图像的颜色显示不正常。</p><p>这是因为matplotlib使用的颜色模式是我们现在流行的RGB模式，而opencv使用的是BGR模式，即RGB的倒序模式，与我们通常的RGB是反向的。因此在使用matplotlib显示之前需要做一下图像颜色的转换。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建图片" tabindex="-1"><a class="header-anchor" href="#创建图片" aria-hidden="true">#</a> 创建图片</h3><h4 id="创建白底图片" tabindex="-1"><a class="header-anchor" href="#创建白底图片" aria-hidden="true">#</a> 创建白底图片</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建白底图片</span>
image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">&#39;RGB&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&quot;sdsd.png&quot;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图像压缩" tabindex="-1"><a class="header-anchor" href="#图像压缩" aria-hidden="true">#</a> 图像压缩</h3><h4 id="保真压缩" tabindex="-1"><a class="header-anchor" href="#保真压缩" aria-hidden="true">#</a> 保真压缩</h4><div class="custom-container tip"><p class="custom-container-title">提示</p><p>保真压缩能够在保证图像质量的情况下对图片进行压缩</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">def</span> <span class="token function">pic_compress</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span> out_path<span class="token punctuation">,</span> target_size<span class="token operator">=</span><span class="token number">199</span><span class="token punctuation">,</span> quality<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pic_type<span class="token operator">=</span><span class="token string">&#39;.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 读取图片bytes</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        pic_byte <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

    img_np <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>pic_byte<span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
    img_cv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>img_np<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>IMREAD_ANYCOLOR<span class="token punctuation">)</span>

    current_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pic_byte<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;图片压缩前的大小为(KB)：&quot;</span><span class="token punctuation">,</span> current_size<span class="token punctuation">)</span>
    <span class="token keyword">while</span> current_size <span class="token operator">&gt;</span> target_size<span class="token punctuation">:</span>
        pic_byte <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imencode<span class="token punctuation">(</span>pic_type<span class="token punctuation">,</span> img_cv<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>IMWRITE_JPEG_QUALITY<span class="token punctuation">)</span><span class="token punctuation">,</span> quality<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> quality <span class="token operator">-</span> step <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        quality <span class="token operator">-=</span> step
        current_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pic_byte<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span>

    <span class="token comment"># 保存图片</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>out_path<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>pic_byte<span class="token punctuation">)</span><span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pic_byte<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span>
pic_size <span class="token operator">=</span> pic_compress<span class="token punctuation">(</span><span class="token string">&#39;digi/%s&#39;</span><span class="token operator">%</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">&#39;zip_digi/%s&#39;</span><span class="token operator">%</span><span class="token builtin">file</span><span class="token punctuation">,</span>target_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图像方法" tabindex="-1"><a class="header-anchor" href="#图像方法" aria-hidden="true">#</a> 图像方法</h3><h4 id="添加贴图" tabindex="-1"><a class="header-anchor" href="#添加贴图" aria-hidden="true">#</a> 添加贴图</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">write_paste_image</span><span class="token punctuation">(</span>img_path<span class="token punctuation">,</span>img_path1<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    给原图片加白底，并左上角放置贴图
    :param img_path: 原图路径
    :param img_path1: 贴图路径
    :return:
    &quot;&quot;&quot;</span>
    <span class="token comment"># 先创建白底图片，尺寸比原图大100像素</span>
    img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
    img1 <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path1<span class="token punctuation">)</span>
    size <span class="token operator">=</span> img<span class="token punctuation">.</span>size
    write_size <span class="token operator">=</span> <span class="token number">100</span>
    background <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">&#39;RGB&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>write_size<span class="token punctuation">,</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>write_size<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    position <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>write_size<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>write_size<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    background<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>img<span class="token punctuation">,</span>position<span class="token punctuation">)</span>
    background<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    background<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token operator">+</span>img_path1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="库-pandas" tabindex="-1"><a class="header-anchor" href="#库-pandas" aria-hidden="true">#</a> 库:Pandas</h2><h3 id="excel" tabindex="-1"><a class="header-anchor" href="#excel" aria-hidden="true">#</a> Excel</h3><h4 id="文件读取" tabindex="-1"><a class="header-anchor" href="#文件读取" aria-hidden="true">#</a> 文件读取</h4><p>读取文件并忽略第一行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>excel <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">&#39;file.xlsx&#39;</span><span class="token punctuation">,</span>sheet_name<span class="token operator">=</span><span class="token string">&#39;Sheet1&#39;</span><span class="token punctuation">,</span>skiprows<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="excel方法" tabindex="-1"><a class="header-anchor" href="#excel方法" aria-hidden="true">#</a> Excel方法</h4><p>获取数据表起始行，忽略空行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_start_row</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    excel <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    sheet_list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> excel<span class="token punctuation">.</span>sheet_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sheet <span class="token operator">=</span> excel<span class="token punctuation">.</span>sheet_by_name<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        start_row <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>
            datas <span class="token operator">=</span> sheet<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span>rowx<span class="token operator">=</span>j<span class="token punctuation">,</span>start_colx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>end_colx<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> datas<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            <span class="token keyword">if</span> datas<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">:</span>
                start_row<span class="token operator">+=</span><span class="token number">1</span>
        sheet_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> start_row
    <span class="token keyword">return</span> sheet_list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表头处理" tabindex="-1"><a class="header-anchor" href="#表头处理" aria-hidden="true">#</a> 表头处理</h3><h4 id="表头替换" tabindex="-1"><a class="header-anchor" href="#表头替换" aria-hidden="true">#</a> 表头替换</h4><p>直接替换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>某一行作为表头</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>new_title <span class="token operator">=</span> df<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
df<span class="token punctuation">.</span>columns <span class="token operator">=</span> title
df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列处理" tabindex="-1"><a class="header-anchor" href="#列处理" aria-hidden="true">#</a> 列处理</h3><h4 id="重置索引" tabindex="-1"><a class="header-anchor" href="#重置索引" aria-hidden="true">#</a> 重置索引</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="新增列" tabindex="-1"><a class="header-anchor" href="#新增列" aria-hidden="true">#</a> 新增列</h4><p>在某一位置插入一列</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># loc 表示插入到第三列的位置</span>
data<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">&#39;new_time&#39;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除列" tabindex="-1"><a class="header-anchor" href="#删除列" aria-hidden="true">#</a> 删除列</h4><p>直接删除</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">del</span> data<span class="token punctuation">[</span><span class="token string">&#39;time&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="列去重" tabindex="-1"><a class="header-anchor" href="#列去重" aria-hidden="true">#</a> 列去重</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 所有列去重</span>
df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>keep<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment"># 某一列去重</span>
df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;comment&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列位置处理" tabindex="-1"><a class="header-anchor" href="#列位置处理" aria-hidden="true">#</a> 列位置处理</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 两列位置互换</span>
df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行处理" tabindex="-1"><a class="header-anchor" href="#行处理" aria-hidden="true">#</a> 行处理</h3><h4 id="删除nan" tabindex="-1"><a class="header-anchor" href="#删除nan" aria-hidden="true">#</a> 删除Nan</h4><p>可以使用 <code>dropna()</code> 方法来去除数据为 <code>nan</code> 的行。这个方法可以通过设置不同的参数来实现不同的去除方式。以下是一些常见的用法：</p><ol><li>删除含有 <code>nan</code> 的行：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
df.dropna()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>删除所有值都为 <code>nan</code> 的行：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
df.dropna(how=&#39;all&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>删除某些列中含有 <code>nan</code> 的行：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
df.dropna(subset=[&#39;col1&#39;, &#39;col2&#39;])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>col1</code> 和 <code>col2</code> 是需要判断的列名。</p><p>还可以使用 <code>thresh</code> 参数来指定行中最少要有多少个非 <code>nan</code> 值才能保留该行。例如，下面的代码将只保留每行中至少有 2 个非 <code>nan</code> 值的行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
df.dropna(thresh=2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="追加数据" tabindex="-1"><a class="header-anchor" href="#追加数据" aria-hidden="true">#</a> 追加数据</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Amount&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> all_issue<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Amount&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
df
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通用方法" tabindex="-1"><a class="header-anchor" href="#通用方法" aria-hidden="true">#</a> 通用方法</h3><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> row<span class="token punctuation">,</span>row_val <span class="token keyword">in</span> excel<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">for</span> col <span class="token keyword">in</span> excel<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="排序-1" tabindex="-1"><a class="header-anchor" href="#排序-1" aria-hidden="true">#</a> 排序</h4><p>按照索引排序</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 创建示例数据</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 打乱索引顺序</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># 按照索引重新排序</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
      name  age
<span class="token number">0</span>  Charlie   <span class="token number">35</span>
<span class="token number">1</span>      Bob   <span class="token number">30</span>
<span class="token number">2</span>    Alice   <span class="token number">25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检查数据重复" tabindex="-1"><a class="header-anchor" href="#检查数据重复" aria-hidden="true">#</a> 检查数据重复</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 该命令会检索出同一行完全重复的index</span>
df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 该命令检查某字段是否重复的index,keep=False会取出所有重复数据</span>
df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;level3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>keep<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token comment"># 取出数据</span>
df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;level3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>keep<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 根据条件删除一行数据</span>
df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>y <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改数据" tabindex="-1"><a class="header-anchor" href="#修改数据" aria-hidden="true">#</a> 修改数据</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 修改x行y列的数据为test</span>
df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span>
<span class="token comment"># 遍历修改数据</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span>k <span class="token keyword">in</span> df<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token string">&#39;列名&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;修改值&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="筛选数据" tabindex="-1"><a class="header-anchor" href="#筛选数据" aria-hidden="true">#</a> 筛选数据</h3><h4 id="条件筛选" tabindex="-1"><a class="header-anchor" href="#条件筛选" aria-hidden="true">#</a> 条件筛选</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查找物理成绩大于60，且生物成绩大于80的行。（注意要带括号</span>
df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&quot;物理&quot;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&quot;生物&quot;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="范围筛选" tabindex="-1"><a class="header-anchor" href="#范围筛选" aria-hidden="true">#</a> 范围筛选</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 筛选指定时间段内的数据</span>
<span class="token keyword">def</span> <span class="token function">slice_data</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>on<span class="token punctuation">,</span>off<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    对指定时间内的数据进行切片，并返回数据对象
    :param data: 数据对象
    :param on: 切片起点
    :param off: 切片终点
    :return: 切片数据对象
    &quot;&quot;&quot;</span>
    on <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>on<span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span>
    off <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>off<span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;split时间&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span>on<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;split时间&#39;</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>off<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据去重" tabindex="-1"><a class="header-anchor" href="#数据去重" aria-hidden="true">#</a> 数据去重</h3><p>pandas 对数据去重，并保留日期是最新的那行数据</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 假设原始数据已经读入到了 DataFrame 对象 df 中，并且日期列名为 date</span>
<span class="token comment"># 将日期列转换为 pandas 的日期类型</span>
df<span class="token punctuation">[</span><span class="token string">&#39;date&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 按照日期从新到旧排序</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">&#39;date&#39;</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># 去除重复数据，并保留日期是最新的那行数据</span>
df <span class="token operator">=</span> df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;column1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;column2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导出" tabindex="-1"><a class="header-anchor" href="#导出" aria-hidden="true">#</a> 导出</h3><h4 id="excel-1" tabindex="-1"><a class="header-anchor" href="#excel-1" aria-hidden="true">#</a> excel</h4><p>在 Pandas 中，可以使用 <code>to_excel</code> 函数将 DataFrame 数据导出到 Excel 文件。以下是一个示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 创建示例数据</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Age&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;City&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;New York&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;London&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Paris&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token comment"># 导出到 Excel 文件</span>
df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">&#39;data.xlsx&#39;</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们创建了一个包含姓名、年龄和城市的 DataFrame，并使用 <code>to_excel</code> 函数将其导出到名为 <code>data.xlsx</code> 的 Excel 文件。通过设置 <code>index=False</code>，可以防止导出时生成额外的索引列。</p><p>导出后的 Excel 文件将保存在当前工作目录中。如果希望指定保存路径，可以提供完整的文件路径，例如 <code>df.to_excel(&#39;/path/to/data.xlsx&#39;, index=False)</code>。</p><h2 id="库-lxrd" tabindex="-1"><a class="header-anchor" href="#库-lxrd" aria-hidden="true">#</a> 库:lxrd</h2>`,88),v={class:"custom-container tip"},b=n("p",{class:"custom-container-title"},"网站资源",-1),h={href:"https://xlrd.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},g=s(`<h3 id="基本方法-1" tabindex="-1"><a class="header-anchor" href="#基本方法-1" aria-hidden="true">#</a> 基本方法</h3><p>获取所有sheet</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>excel <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
excel<span class="token punctuation">.</span>sheet_names<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取sheet数据最大行、最大列</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>excel <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
excel<span class="token punctuation">.</span>sheet_names<span class="token punctuation">(</span><span class="token punctuation">)</span>
sheet <span class="token operator">=</span> excel<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
sheet<span class="token punctuation">.</span>nrows <span class="token comment"># 获取最大行</span>
sheet<span class="token punctuation">.</span>ncols <span class="token comment"># 获取最大列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function y(f,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("div",r,[d,n("p",null,[n("a",k,[t("3. 用Python进行图像处理 — Python基础与应用 文档 (osgeo.cn)"),p(a)])])]),m,n("div",v,[b,n("p",null,[n("a",h,[t("xlrd — xlrd 2.0.1 documentation"),p(a)])])]),g])}const _=e(l,[["render",y],["__file","Python数据处理.html.vue"]]);export{_ as default};
