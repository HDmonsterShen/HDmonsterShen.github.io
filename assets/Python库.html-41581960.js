import{_ as l,r as i,o as c,c as u,a as n,d as a,w as t,b as s,e as o}from"./app-a2869b35.js";const d={},r=n("h1",{id:"python库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python库","aria-hidden":"true"},"#"),s(" Python库")],-1),k={class:"table-of-contents"},v=o('<h2 id="库索引" tabindex="-1"><a class="header-anchor" href="#库索引" aria-hidden="true">#</a> 库索引</h2><h2 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库" aria-hidden="true">#</a> 标准库</h2><h3 id="sys" tabindex="-1"><a class="header-anchor" href="#sys" aria-hidden="true">#</a> sys</h3><p>Python 的 <code>sys</code> 模块提供了对 Python 解释器强有力的访问，它包含了一些与 Python 解释器强烈相关的函数和变量。以下是一些 <code>sys</code> 模块的主要功能：</p><ol><li><strong>命令行参数</strong>: 通过 <code>sys.argv</code>，你可以获取到命令行参数的列表。这个列表的第一个元素是你的脚本名，后面的元素是命令行参数。</li><li><strong>退出程序</strong>: <code>sys.exit(arg)</code> 函数可以使你的脚本退出，并且向调用它的程序返回 <code>arg</code>。如果你不提供 <code>arg</code>，则默认返回0。</li><li><strong>标准流</strong>: <code>sys.stdin</code>、<code>sys.stdout</code> 和 <code>sys.stderr</code> 变量对应于你的程序的标准输入、标准输出和标准错误流。</li><li><strong>Python 路径</strong>: <code>sys.path</code> 是一个 Python 搜索模块的路径列表。当你导入一个模块时，Python 会在 <code>sys.path</code> 列表中的目录中搜索这个模块。</li><li><strong>Python 版本信息</strong>: <code>sys.version_info</code> 可以获取到当前 Python 解释器的版本信息。</li><li><strong>异常信息</strong>: <code>sys.exc_info()</code> 函数返回一个包含当前异常信息的三元组。如果当前没有异常，则返回三个 None。</li><li><strong>调用栈帧</strong>: <code>sys._getframe()</code> 返回调用者的栈帧。</li><li><strong>操作系统信息</strong>: <code>sys.platform</code> 可以获取到当前操作系统的信息。</li></ol>',5),m=n("code",null,"sys",-1),b={href:"https://docs.python.org/3/library/sys.html",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"sys",-1),g=o(`<h4 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入模块</span>
<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;C:/python&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 自动创建完整路径</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">&quot;~/python&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 每次导入模块则重载模块</span>
<span class="token keyword">import</span> importlib
hello <span class="token operator">=</span> importlib<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查看模块包含的方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">## 或</span>
copy<span class="token punctuation">.</span>__all__

<span class="token comment"># 查看模块帮助</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span>copy<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>

<span class="token comment"># 查看模块路径</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作外部程序" tabindex="-1"><a class="header-anchor" href="#操作外部程序" aria-hidden="true">#</a> 操作外部程序</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>execv<span class="token punctuation">(</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># windows下使用</span>
os<span class="token punctuation">.</span>startfile<span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typing-类型注解" tabindex="-1"><a class="header-anchor" href="#typing-类型注解" aria-hidden="true">#</a> typing(类型注解)</h3><p>以下是一些<code>typing</code>库的示例：</p><ol><li>定义函数参数和返回类型</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Any

<span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment"># function logic here</span>
    <span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>类型别名（Type Aliases）</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Tuple

UserId <span class="token operator">=</span> <span class="token builtin">int</span>
UserDict <span class="token operator">=</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
Address <span class="token operator">=</span> Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>泛型（Generics）</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar<span class="token punctuation">,</span> Generic

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>items<span class="token punctuation">:</span> List<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> T<span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>可选类型(Optional)</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional

<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> name<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello, Stranger&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>类型组合</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Tuple<span class="token punctuation">,</span> Union

<span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment"># function logic here</span>
    <span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些是<code>typing</code>库的一些常见用例，它可以帮助开发人员在代码中指定更明确的类型，提高代码可读性和可维护性。</p><h3 id="collections" tabindex="-1"><a class="header-anchor" href="#collections" aria-hidden="true">#</a> collections⭐</h3><p>Python 的 <code>collections</code> 模块实现了特殊的容器数据类型，提供了 Python 的通用内置容器，<code>dict</code>，<code>list</code>，<code>set</code>，和 <code>tuple</code> 的替代选择。</p><p>一些主要的 <code>collections</code> 模块包括：</p><ol><li><strong>namedtuple()</strong>: 生成可以使用名字来访问元素的元组的子类。这些元组类似于 C 的结构体或者是 Pascal 的记录。</li><li><strong>deque</strong>: 双端队列，可以从队列的任何一端添加或删除元素。这比有类似功能的列表要快。</li><li><strong>Counter</strong>: 字典的子类，提供了可哈希对象的计数功能。它是一个集合，元素像字典键(key)一样存储，它们的计数存储为值。计数可以是任何整数值，包括0和负数。</li><li><strong>OrderedDict</strong>: 字典的子类，保持键插入的顺序。删除和重新设置一个键将它移到末尾。</li><li><strong>defaultdict</strong>: 字典的子类，提供了一个工厂函数用于提供缺失的值。</li><li><strong>ChainMap</strong>: 类似字典的类，用于创建多个映射的单一视图。</li></ol><p>每种数据类型都有其自己的优势和特定的用途。这些类型在大多数的日常编程任务中都能派上用场，并且他们的使用可以使你的代码更具可读性和自我解释性。</p><p>你可以在 Python 官方文档中找到更多关于 <code>collections</code> 模块的详细信息：https://docs.python.org/3/library/collections.html</p><p><strong>1. 使用 <code>Counter</code> 统计元素的数量：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
from collections import Counter

lst = [&#39;apple&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;banana&#39;, &#39;banana&#39;]
count = Counter(lst)

print(count)
# 输出: Counter({&#39;apple&#39;: 3, &#39;banana&#39;: 3, &#39;orange&#39;: 2})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 使用 <code>defaultdict</code> 来避免查找字典时键不存在的问题：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
from collections import defaultdict

d = defaultdict(int)
print(d[&#39;key&#39;])  # 输出: 0，尽管 &#39;key&#39; 并没有在字典中

d[&#39;key&#39;] = 5
print(d[&#39;key&#39;])  # 输出: 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 使用 <code>namedtuple</code> 创建一个自定义的元组对象：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
from collections import namedtuple

# 创建一个命名元组类型 &#39;Person&#39; 有 &#39;name&#39; 和 &#39;age&#39; 两个字段
Person = namedtuple(&#39;Person&#39;, [&#39;name&#39;, &#39;age&#39;])

bob = Person(name=&#39;Bob&#39;, age=30)

print(bob.name)  # 输出: Bob
print(bob.age)  # 输出: 30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 使用 <code>deque</code> 创建一个双端队列：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
from collections import deque

d = deque()

# 添加到队列右边
d.append(&#39;a&#39;)
d.append(&#39;b&#39;)

print(d)  # 输出: deque([&#39;a&#39;, &#39;b&#39;])

# 从队列左边添加
d.appendleft(&#39;c&#39;)

print(d)  # 输出: deque([&#39;c&#39;, &#39;a&#39;, &#39;b&#39;])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 使用 <code>OrderedDict</code> 保留字典键值插入的顺序：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
from collections import OrderedDict

d = OrderedDict()

d[&#39;a&#39;] = 1
d[&#39;b&#39;] = 2
d[&#39;c&#39;] = 3
d[&#39;d&#39;] = 4

for key, value in d.items():
    print(key, value)
# 输出: 
# a 1
# b 2
# c 3
# d 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些例子展示了 <code>collections</code> 模块的主要用途，实际上它可以完成更多的任务，依赖于特定的需求和场景。</p><p><strong>创建轻便类</strong></p><p>Python 的 <code>collections</code> 模块主要是用来创建容器数据类型，如字典、元组、列表、队列等，而不是用来直接创建类。不过，你可以使用 <code>collections</code> 模块中的 <code>namedtuple</code> 函数来创建一个带有命名字段的元组子类，这种元组子类在某些情况下可以作为轻量级的类使用。</p><p>以下是如何使用 <code>namedtuple</code> 来创建一个类的示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pythonCopy code
from collections import namedtuple

# 创建一个命名元组类型 &#39;Person&#39; 有 &#39;name&#39; 和 &#39;age&#39; 两个字段
Person = namedtuple(&#39;Person&#39;, [&#39;name&#39;, &#39;age&#39;])

# 现在你可以创建一个 &#39;Person&#39; 实例
bob = Person(name=&#39;Bob&#39;, age=30)

# 你可以像访问类的属性一样访问元素
print(bob.name)  # 输出: Bob
print(bob.age)  # 输出: 30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>namedtuple</code> 创建的类是不可变的，就像元组一样，一旦创建，你就不能更改它的值。如果你需要一个可以更改值的类，你可能需要自己创建一个常规的类。</p><h3 id="io" tabindex="-1"><a class="header-anchor" href="#io" aria-hidden="true">#</a> Io</h3><h4 id="io-stringio类" tabindex="-1"><a class="header-anchor" href="#io-stringio类" aria-hidden="true">#</a> Io.StringIO类</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> io
<span class="token keyword">import</span> sys

<span class="token comment"># 导入该功能后 任何输出到sys.stdout的字符串都会被储存到io.StringIO()中</span>
sysStdout <span class="token operator">=</span> io<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;An error message&#39;</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Another error message\\n&#39;</span><span class="token punctuation">)</span>
 
<span class="token comment"># 获取储存的字符串</span>
output <span class="token operator">=</span> sysStdout<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>

<span class="token comment"># 恢复原始输出</span>
sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> sys<span class="token punctuation">.</span>__stdout__

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工具库" tabindex="-1"><a class="header-anchor" href="#工具库" aria-hidden="true">#</a> 工具库</h2><table><thead><tr><th>库</th><th>描述</th><th>函数</th></tr></thead><tbody><tr><td>日志工具</td><td>loguru</td><td></td></tr><tr><td>os</td><td>访问操作系统服务，操作外部程序</td><td></td></tr></tbody></table><h3 id="日志工具" tabindex="-1"><a class="header-anchor" href="#日志工具" aria-hidden="true">#</a> 日志工具</h3><h4 id="loguru" tabindex="-1"><a class="header-anchor" href="#loguru" aria-hidden="true">#</a> loguru</h4>`,48),y={href:"https://loguru.readthedocs.io/en/stable/#readme",target:"_blank",rel:"noopener noreferrer"},f=o(`<blockquote><p>错误追踪</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@logger<span class="token punctuation">.</span>catch</span>
<span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    logger<span class="token punctuation">.</span>add<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&quot;{time:YYYY-MM-DD HH:mm:ss} &lt;yellow&gt;{level}&lt;/yellow&gt; {message}&quot;</span><span class="token punctuation">,</span> <span class="token builtin">filter</span><span class="token operator">=</span><span class="token string">&quot;my_model&quot;</span><span class="token punctuation">,</span>
               level<span class="token operator">=</span><span class="token string">&quot;INFO&quot;</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&quot;file_{time}.log&quot;</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&quot;{time} {level} {message}&quot;</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;info测试&quot;</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&quot;critical测试&quot;</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;debug测试1&quot;</span><span class="token punctuation">)</span>
    my_func<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;-这里会追踪错误栈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码工具" tabindex="-1"><a class="header-anchor" href="#代码工具" aria-hidden="true">#</a> 代码工具</h3><h4 id="pyarmor-代码混淆" tabindex="-1"><a class="header-anchor" href="#pyarmor-代码混淆" aria-hidden="true">#</a> pyarmor(代码混淆)</h4>`,4),_={href:"https://pyarmor.dashingsoft.com/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://pyarmor.readthedocs.io/zh/latest",target:"_blank",rel:"noopener noreferrer"},q=o(`<p>PyArmor是一个用于保护Python代码的工具，它可以对Python脚本进行加密、混淆和授权管理，从而提供对源代码的保护和安全性。</p><p>主要特点和功能：</p><ol><li><strong>代码加密和混淆</strong>：PyArmor可以对Python脚本进行加密和混淆，使其难以被逆向工程或篡改。它使用了多种混淆技术，包括名称混淆、控制流转换和常量替换，从而增加了代码的复杂性和可读性。</li><li><strong>授权管理</strong>：PyArmor提供了灵活的授权管理功能，可以帮助开发人员对其Python应用程序进行许可证控制和限制。你可以生成加密的许可证文件，并在运行时验证许可证以确保只有授权用户可以运行你的应用程序。</li><li><strong>支持多种平台</strong>：PyArmor可以在Windows、Linux和macOS等多种操作系统上运行，并且可以保护各种Python版本的代码。</li><li><strong>简单易用</strong>：PyArmor具有简单易用的命令行界面，你只需运行几个命令即可完成代码的加密和混淆。它还提供了详细的文档和示例，帮助你快速上手。</li><li><strong>完整性保护</strong>：PyArmor还提供了一些其他的保护措施，如防止代码被篡改和重打包等。</li></ol><p>需要注意的是，PyArmor主要用于保护Python代码的知识产权和防止逆向工程，但并不能完全防止破解。对于更高级的安全需求，可能需要结合其他保护措施和技术来增强代码的安全性。</p><p>你可以通过PyArmor的官方网站获取更多关于该工具的信息、文档和示例：https://pyarmor.readthedocs.io/</p><h4 id="watchdog-代码变化" tabindex="-1"><a class="header-anchor" href="#watchdog-代码变化" aria-hidden="true">#</a> watchdog(代码变化)</h4><p><code>watchdog</code> 是一个用于监视文件系统变化的 Python 库。它提供了一组 API 和工具，用于监控目录、文件的创建、修改、删除等操作，并触发相应的事件回调。</p><p>使用 <code>watchdog</code> 库，你可以编写脚本来监视指定目录下文件的变化，例如实时监测文件的修改、自动化处理文件变动等。这在开发、测试和文件同步等场景下非常有用。</p><p><code>watchdog</code> 提供了简单易用的 API，支持跨平台，并且具有高效的文件监控能力。</p><p>你可以使用 <code>pip</code> 包管理器来安装 <code>watchdog</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> watchdog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 Python 脚本中引入 <code>watchdog</code> 模块，并使用其中的类和方法来实现文件监控的功能。</p><p>更多关于 <code>watchdog</code> 的详细信息和使用示例，你可以参考官方文档：[Watchdog Documentation]</p><h4 id="pylint-代码检查工具" tabindex="-1"><a class="header-anchor" href="#pylint-代码检查工具" aria-hidden="true">#</a> PyLint(代码检查工具)</h4><p>识别python程序中潜在的问题</p><h4 id="prospector-静态代码检查工具" tabindex="-1"><a class="header-anchor" href="#prospector-静态代码检查工具" aria-hidden="true">#</a> Prospector(静态代码检查工具)</h4><h2 id="格式化输出" tabindex="-1"><a class="header-anchor" href="#格式化输出" aria-hidden="true">#</a> 格式化输出</h2><h3 id="pprint" tabindex="-1"><a class="header-anchor" href="#pprint" aria-hidden="true">#</a> pprint</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys<span class="token punctuation">,</span>pprint
pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gui库" tabindex="-1"><a class="header-anchor" href="#gui库" aria-hidden="true">#</a> GUI库</h2><h3 id="pyqt5" tabindex="-1"><a class="header-anchor" href="#pyqt5" aria-hidden="true">#</a> PyQt5</h3>`,21),x={href:"https://github.com/PyQt5",target:"_blank",rel:"noopener noreferrer"},P={href:"https://riverbankcomputing.com/news",target:"_blank",rel:"noopener noreferrer"},T=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> PyQt6-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>学习网站</p>`,2),C={href:"https://www.byhy.net/",target:"_blank",rel:"noopener noreferrer"},A=o(`<p>PySide</p><div class="language-BASH line-numbers-mode" data-ext="BASH"><pre class="language-BASH"><code>pip install PySide6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tkinter" tabindex="-1"><a class="header-anchor" href="#tkinter" aria-hidden="true">#</a> Tkinter</h3>`,3),S={href:"https://docs.python.org/zh-cn/3/library/tkinter.html",target:"_blank",rel:"noopener noreferrer"},z=o(`<h3 id="streamlit" tabindex="-1"><a class="header-anchor" href="#streamlit" aria-hidden="true">#</a> Streamlit</h3><p>Streamlit 是一个用于快速构建数据应用程序和交互式界面的 Python 库。它提供了简单易用的 API，使开发者能够快速创建交互式的数据应用。</p><p>以下是一个简单的示例，展示了如何使用 Streamlit 创建一个基本的 Web 应用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> streamlit <span class="token keyword">as</span> st

<span class="token comment"># 添加标题</span>
st<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Hello Streamlit&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 添加文本</span>
st<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;这是一个基本的 Streamlit 应用&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 添加交互部件</span>
name <span class="token operator">=</span> st<span class="token punctuation">.</span>text_input<span class="token punctuation">(</span><span class="token string">&#39;请输入您的名字&#39;</span><span class="token punctuation">)</span>
button <span class="token operator">=</span> st<span class="token punctuation">.</span>button<span class="token punctuation">(</span><span class="token string">&#39;提交&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 处理交互事件</span>
<span class="token keyword">if</span> button<span class="token punctuation">:</span>
    st<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;您好，&#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;！&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过运行上述代码来启动 Streamlit 应用。在终端中使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>arduinoCopy code
streamlit run your_app.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，我们使用 <code>st.title</code> 和 <code>st.write</code> 添加了标题和文本内容。然后，我们使用 <code>st.text_input</code> 创建了一个文本输入框，并使用 <code>st.button</code> 创建了一个提交按钮。当用户点击提交按钮时，我们使用 <code>st.write</code> 显示一条问候消息。</p><p>除了这些基本的部件，Streamlit 还提供了丰富的部件和功能，如图表绘制、数据可视化、布局控制等，使您能够创建更复杂和交互性更强的应用程序。</p><p>您可以通过查阅 Streamlit 官方文档（https://streamlit.io/）来了解更多关于 Streamlit 的详细信息和使用方法。</p><h2 id="数据处理" tabindex="-1"><a class="header-anchor" href="#数据处理" aria-hidden="true">#</a> 数据处理</h2><h3 id="base64-二进制处理" tabindex="-1"><a class="header-anchor" href="#base64-二进制处理" aria-hidden="true">#</a> base64(二进制处理)</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据持久化-pickle" tabindex="-1"><a class="header-anchor" href="#数据持久化-pickle" aria-hidden="true">#</a> 数据持久化:pickle</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>pickle模块是Python专用的持久化模块，可以持久化包括自定义类在内的各种数据，比较适合Python本身复杂数据的存贮。</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pickle
<span class="token comment"># 保存为文件</span>
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>df_fold<span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;df_fold.pkl&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 读取</span>
s <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;df_fold.pkl&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据转换-json" tabindex="-1"><a class="header-anchor" href="#数据转换-json" aria-hidden="true">#</a> 数据转换:JSON</h3><p>数据转换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">}</span>
ds <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token comment"># python -&gt; js</span>
d_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
ds_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>ds<span class="token punctuation">)</span>
<span class="token comment"># js-&gt;python</span>
json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>d_json<span class="token punctuation">)</span>
json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>ds_json<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写入json文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># 写入</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;text.json&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>
  json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>f_obj<span class="token punctuation">)</span>
<span class="token comment"># 读取</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;text.json&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>
  numbers <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f_obj<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="队列-queue" tabindex="-1"><a class="header-anchor" href="#队列-queue" aria-hidden="true">#</a> 队列:queue</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>队列</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> queue
<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    message_queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    message_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
    message_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;start put 3&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        message_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token comment"># 无需等待，直接抛出异常</span>
        message_queue<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> queue<span class="token punctuation">.</span>Full <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token comment"># 因为最大长度限制，数据会阻塞在这里</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    message_queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    message_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&quot;hello world1&quot;</span><span class="token punctuation">)</span>
    message_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&quot;hello world2&quot;</span><span class="token punctuation">)</span>
    message <span class="token operator">=</span> message_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    message <span class="token operator">=</span> message_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url处理-urllib" tabindex="-1"><a class="header-anchor" href="#url处理-urllib" aria-hidden="true">#</a> URL处理:urllib</h3><p>编码解码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">as</span> ip

keyword <span class="token operator">=</span> <span class="token string">&quot;汉字&quot;</span>
d <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;k&quot;</span><span class="token punctuation">:</span>keyword
<span class="token punctuation">}</span>
ret <span class="token operator">=</span> up<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>url拼接</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse

base_url <span class="token operator">=</span> <span class="token string">&quot;https://emuchong.com/&quot;</span>
parse<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二分查找-bisect" tabindex="-1"><a class="header-anchor" href="#二分查找-bisect" aria-hidden="true">#</a> 二分查找:bisect</h3><p>二分查找库</p><h3 id="正则表达式-re" tabindex="-1"><a class="header-anchor" href="#正则表达式-re" aria-hidden="true">#</a> 正则表达式:re</h3><p>查找文本</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pattern <span class="token operator">=</span> <span class="token string">&#39;this&#39;</span>
text <span class="token operator">=</span> <span class="token string">&#39;Does this text match the pattern?&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>text<span class="token punctuation">)</span>
<span class="token comment"># 开始和结束的索引</span>
s <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
e <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>re<span class="token punctuation">.</span>pattern<span class="token punctuation">,</span><span class="token keyword">match</span><span class="token punctuation">.</span>string<span class="token punctuation">,</span>s<span class="token punctuation">,</span>e<span class="token punctuation">,</span>text<span class="token punctuation">[</span>s<span class="token punctuation">:</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>re<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>e<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>s<span class="token punctuation">:</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译表达式</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>编译的正则表达式具有更高的效率</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pattern <span class="token operator">=</span> <span class="token string">&#39;this&#39;</span>
text <span class="token operator">=</span> <span class="token string">&#39;Does this text match the pattern?&#39;</span>
regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>
<span class="token keyword">match</span> <span class="token operator">=</span> regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="搜索比较类库-difflib" tabindex="-1"><a class="header-anchor" href="#搜索比较类库-difflib" aria-hidden="true">#</a> 搜索比较类库:difflib</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>能够确定两个序列的相似程度，还让你能够从很多序列中找出与指 定序列最为相似的序列。例如，可使用difflib来创建简单的搜索程序</p></div><h3 id="world处理-python-docx" tabindex="-1"><a class="header-anchor" href="#world处理-python-docx" aria-hidden="true">#</a> World处理：python-docx</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> python-docx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="迭代器-itertools" tabindex="-1"><a class="header-anchor" href="#迭代器-itertools" aria-hidden="true">#</a> 迭代器(itertools)</h3><p><code>itertools</code> 是 Python 标准库中的一个模块，提供了一组用于创建和操作迭代器（iterators）的工具函数。这些函数可以用于生成各种迭代对象，如循环、排列、组合等。<code>itertools</code> 提供了高效且内存友好的迭代器实现，适用于处理大数据集或生成无限序列。以下是一些常用的 <code>itertools</code> 函数和示例：</p><p><strong>1. <code>itertools.count(start=0, step=1)</code>：</strong> 生成一个无限递增的迭代器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> itertools

<span class="token keyword">for</span> num <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>count<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 无限输出奇数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. <code>itertools.cycle(iterable)</code>：</strong> 生成一个无限循环的迭代器，反复遍历传入的可迭代对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> itertools

colors <span class="token operator">=</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. <code>itertools.repeat(elem, times=None)</code>：</strong> 生成一个重复元素的迭代器，可以指定重复次数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> itertools

repeated <span class="token operator">=</span> itertools<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> times<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> repeated<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 重复输出 5 三次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. <code>itertools.chain(\\*iterables)</code>：</strong> 将多个可迭代对象连接成一个单一的迭代器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> itertools

nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>
combined <span class="token operator">=</span> itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> letters<span class="token punctuation">)</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> combined<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. <code>itertools.combinations(iterable, r)</code> 和 <code>itertools.permutations(iterable, r=None)</code>：</strong> 生成组合和排列的迭代器，分别返回所有可能的组合和排列。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> itertools

colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">]</span>
comb <span class="token operator">=</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 两两组合</span>
perm <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>colors<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 两两排列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些示例只是 <code>itertools</code> 提供的功能中的一小部分。你可以根据需要探索更多的函数，以及如何将它们结合使用来满足不同的迭代需求。这个模块非常有用，特别是在处理迭代、排列组合等问题时。</p><h2 id="图片处理" tabindex="-1"><a class="header-anchor" href="#图片处理" aria-hidden="true">#</a> 图片处理</h2><h3 id="pillow" tabindex="-1"><a class="header-anchor" href="#pillow" aria-hidden="true">#</a> pillow</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>该库可以进行网页截图</p></div><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pillow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>网页元素截图</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>service <span class="token keyword">import</span> Service
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options
<span class="token comment"># 截图的库</span>
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token comment"># 移动鼠标</span>
url <span class="token operator">=</span> <span class="token string">&quot;https://fanqier.cn/register&quot;</span>
s <span class="token operator">=</span> Service<span class="token punctuation">(</span><span class="token string">&quot;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&quot;</span><span class="token punctuation">)</span>
chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>
br <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>service<span class="token operator">=</span>s<span class="token punctuation">,</span> options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">crop_image</span><span class="token punctuation">(</span>image_file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 截取验证码图片</span>
    <span class="token comment"># 定位某个元素在浏览器中的位置</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    img <span class="token operator">=</span> br<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>by<span class="token operator">=</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;//img[@class=&quot;big&quot;]&#39;</span><span class="token punctuation">)</span>
    location <span class="token operator">=</span> img<span class="token punctuation">.</span>location
    size <span class="token operator">=</span> img<span class="token punctuation">.</span>size
    top<span class="token punctuation">,</span> buttom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> location<span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">&quot;height&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> location<span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">[</span>
        <span class="token string">&quot;width&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;验证码位置&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> buttom<span class="token punctuation">)</span>
    <span class="token comment"># TODO:截图时注意屏幕缩放必须为100%</span>
    <span class="token comment"># 开始对验证码进行截图</span>
    screenshot <span class="token operator">=</span> br<span class="token punctuation">.</span>get_screenshot_as_png<span class="token punctuation">(</span><span class="token punctuation">)</span>
    screenshot <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>screenshot<span class="token punctuation">)</span><span class="token punctuation">)</span>
    captcha <span class="token operator">=</span> screenshot<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>buttom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    captcha<span class="token punctuation">.</span>save<span class="token punctuation">(</span>image_file_name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> captcha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tar文件处理-tarfile" tabindex="-1"><a class="header-anchor" href="#tar文件处理-tarfile" aria-hidden="true">#</a> tar文件处理(tarfile)</h3><p>pass</p><h2 id="数据库工具" tabindex="-1"><a class="header-anchor" href="#数据库工具" aria-hidden="true">#</a> 数据库工具</h2><h3 id="mysql-connector-python" tabindex="-1"><a class="header-anchor" href="#mysql-connector-python" aria-hidden="true">#</a> mysql-connector-python</h3><p>使用 <code>mysql-connector-python</code> 库连接 MySQL 数据库的步骤如下：</p><ol><li>安装库：首先，确保已安装 <code>mysql-connector-python</code> 库。可以使用以下命令通过 pip 进行安装：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install mysql<span class="token operator">-</span>connector<span class="token operator">-</span>python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>导入库并连接：在 Python 代码中导入 <code>mysql.connector</code> 模块，并使用 <code>connect()</code> 函数连接到 MySQL 数据库。提供正确的主机名（hostname）、用户名（user）、密码（password）和数据库名（database）。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mysql<span class="token punctuation">.</span>connector

<span class="token comment"># 连接数据库</span>
cnx <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
    host<span class="token operator">=</span><span class="token string">&quot;hostname&quot;</span><span class="token punctuation">,</span>
    user<span class="token operator">=</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>
    password<span class="token operator">=</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
    database<span class="token operator">=</span><span class="token string">&quot;database_name&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment"># 执行数据库操作...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>&quot;hostname&quot;</code>、<code>&quot;username&quot;</code>、<code>&quot;password&quot;</code> 和 <code>&quot;database_name&quot;</code> 替换为实际的数据库连接信息。</p><ol><li>执行数据库操作：一旦成功连接到数据库，您可以使用 <code>cnx</code> 对象执行各种数据库操作，例如执行 SQL 查询、插入、更新和删除等。</li></ol><p>使用 <code>pymysql</code> 库连接 MySQL 数据库的步骤如下：</p><ol><li>安装库：确保已安装 <code>pymysql</code> 库。可以使用以下命令通过 pip 进行安装：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pymysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>导入库并连接：在 Python 代码中导入 <code>pymysql</code> 模块，并使用 <code>connect()</code> 函数连接到 MySQL 数据库。提供正确的主机名（host）、用户名（user）、密码（password）和数据库名（db）。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> pymysql

<span class="token comment"># 连接数据库</span>
cnx <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>
    host<span class="token operator">=</span><span class="token string">&quot;hostname&quot;</span><span class="token punctuation">,</span>
    user<span class="token operator">=</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>
    password<span class="token operator">=</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
    db<span class="token operator">=</span><span class="token string">&quot;database_name&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment"># 执行数据库操作...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>&quot;hostname&quot;</code>、<code>&quot;username&quot;</code>、<code>&quot;password&quot;</code> 和 <code>&quot;database_name&quot;</code> 替换为实际的数据库连接信息。</p><ol><li>执行数据库操作：一旦成功连接到数据库，您可以使用 <code>cnx</code> 对象执行各种数据库操作，例如执行 SQL 查询、插入、更新和删除等。</li></ol><p>通过以上步骤，您可以在 Python 中连接到 MySQL 数据库，并执行相应的数据库操作。根据您选择的库，选择合适的方法进行连接和操作。</p><h3 id="pymysql" tabindex="-1"><a class="header-anchor" href="#pymysql" aria-hidden="true">#</a> pymysql</h3><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pymysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基本配置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql<span class="token punctuation">.</span>cursors

connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>cursorclass<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token comment"># 访问数据库</span>
    <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>
        sql <span class="token operator">=</span> <span class="token string">&quot;select id from tablae where deleted = 0 and autoseq = %s&quot;</span>
        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>project_id<span class="token punctuation">)</span>
        <span class="token comment"># 获取所有数据</span>
        result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单查询</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sql <span class="token operator">=</span> <span class="token string">&#39;select * from table where porject = %s&#39;</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
sql <span class="token operator">=</span> <span class="token string">&#39;select * from table where porject = %s and id = %s&#39;</span>
cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>project_id<span class="token punctuation">,</span> project_id<span class="token punctuation">,</span> project_id<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
sql <span class="token operator">=</span> <span class="token string">&#39;select * from table where porject = %(project)s and id = %(id)s&#39;</span>
cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token string">&#39;project&#39;</span><span class="token punctuation">:</span>project<span class="token punctuation">:</span>project_id<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sqlalchemy" tabindex="-1"><a class="header-anchor" href="#sqlalchemy" aria-hidden="true">#</a> sqlalchemy</h3><p>数据库orm</p>`,89),j={class:"custom-container tip"},L=n("p",{class:"custom-container-title"},"网站资源",-1),M={href:"https://github.com/sqlalchemy/sqlalchemy",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.sqlalchemy.org/en/14/",target:"_blank",rel:"noopener noreferrer"},D=o(`<p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> sqlalchemy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建连接</p><ol><li><p>sqlite</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># sqlite</span>
<span class="token comment"># 导入数据库</span>
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token comment"># 创建连接</span>
engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">&#39;sqlite:///foo.db&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>mysql</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建数据库连接，并返回一个数据库对象</span>
<span class="token keyword">def</span> <span class="token function">engine_database</span><span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token string">&#39;3306&#39;</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">&#39;car_info&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    link <span class="token operator">=</span> <span class="token string">&#39;mysql+pymysql://{username}:{password}@{host}:{port}/{database}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>
        username<span class="token operator">=</span>username<span class="token punctuation">,</span>
        password<span class="token operator">=</span>password<span class="token punctuation">,</span>
        host<span class="token operator">=</span>host<span class="token punctuation">,</span>
        port<span class="token operator">=</span>port<span class="token punctuation">,</span>
        database<span class="token operator">=</span>database<span class="token punctuation">)</span>
    <span class="token keyword">return</span> create_engine<span class="token punctuation">(</span>link<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="peewee" tabindex="-1"><a class="header-anchor" href="#peewee" aria-hidden="true">#</a> peewee</h3><p>数据库ORM</p>`,6),I={class:"custom-container tip"},Y=n("p",{class:"custom-container-title"},"网站资源",-1),H={href:"http://docs.peewee-orm.com/en/latest/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/coleifer/peewee",target:"_blank",rel:"noopener noreferrer"},B=o(`<p>安装</p><div class="language-BASH line-numbers-mode" data-ext="BASH"><pre class="language-BASH"><code>pip install peewee
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="命令行工具" tabindex="-1"><a class="header-anchor" href="#命令行工具" aria-hidden="true">#</a> 命令行工具</h2><h3 id="os-system" tabindex="-1"><a class="header-anchor" href="#os-system" aria-hidden="true">#</a> os.system</h3><p>执行cmd命令</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># addPoint返回的是数字，0代表成功执行</span>
addPoint <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;cd %s &amp;&amp; git add .&#39;</span><span class="token operator">%</span>path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取命令行参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys

<span class="token comment"># 返回列表</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>python <span class="token punctuation">.</span>\\main<span class="token punctuation">.</span>py <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&#39;.\\\\main.py&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="optparse" tabindex="-1"><a class="header-anchor" href="#optparse" aria-hidden="true">#</a> optparse</h3><p>python2中可用，python3中弃用</p><h3 id="argparse" tabindex="-1"><a class="header-anchor" href="#argparse" aria-hidden="true">#</a> argparse</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>Unix命令行工具</p></div><h3 id="xonsh" tabindex="-1"><a class="header-anchor" href="#xonsh" aria-hidden="true">#</a> xonsh</h3>`,13),Q={href:"https://github.com/xonsh/xonsh",target:"_blank",rel:"noopener noreferrer"},U=o(`<h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h2><h3 id="多线程-threading" tabindex="-1"><a class="header-anchor" href="#多线程-threading" aria-hidden="true">#</a> 多线程:threading</h3><p>基本使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread

<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span>

t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>hello<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;world1&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>hello<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;world2&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t1<span class="token punctuation">.</span>start
t2<span class="token punctuation">.</span>start
<span class="token comment"># 程序会因为主线程的停止提前结束</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>join：阻塞主线程，等待子线程完成</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>thraads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>git_pull<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>success<span class="token punctuation">)</span><span class="token punctuation">)</span>
threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>setDaemon：主线程退出后子线程必然退出</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread

<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span>

t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>hello<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;world1&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>hello<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;world2&quot;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 设置守护线程</span>
t1<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
t1<span class="token punctuation">.</span>start
t2<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
t2<span class="token punctuation">.</span>start
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承Thread类</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>import time
from threading import Thread

class SleepThread(Thread):
    def __init__(self):
        self.sleep_time=sleep_time
        super().__init__()
    # 重载run方法
    def run(self):
        print(&quot;hello world from SleepThread&quot;)
        time.sleep(self.sleep_time)

if __name__ == &quot;__main__&quot;:
    t1 = SleepThread(2)
    t2 = SleepThread(3)
    t1.start()
    t2.start()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程同步</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread
<span class="token keyword">from</span> threading <span class="token keyword">import</span> Lock<span class="token punctuation">,</span>Rlock<span class="token punctuation">,</span>Condition<span class="token punctuation">,</span>Semaphore

total <span class="token operator">=</span> <span class="token number">0</span>
total_lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">global</span> total
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        total <span class="token operator">+=</span><span class="token number">1</span>
    total_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">global</span> total
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        total <span class="token operator">-=</span><span class="token number">1</span>
    total_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    add_thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>add<span class="token punctuation">)</span>
    desc_thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>desc<span class="token punctuation">)</span>
    
    add_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    desc_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    add_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    desc_thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取返回值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func
        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>result <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get_result</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>result
        <span class="token keyword">except</span> AttributeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>func<span class="token operator">=</span>git<span class="token punctuation">.</span>argv<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
<span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>
	t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多进程-multiprocessing" tabindex="-1"><a class="header-anchor" href="#多进程-multiprocessing" aria-hidden="true">#</a> 多进程:multiprocessing</h3><p>多进程</p><h3 id="调度其他程序-subprocess" tabindex="-1"><a class="header-anchor" href="#调度其他程序-subprocess" aria-hidden="true">#</a> 调度其他程序:subprocess</h3><p>pass</p><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><h3 id="ini" tabindex="-1"><a class="header-anchor" href="#ini" aria-hidden="true">#</a> ini</h3>`,20),G={class:"custom-container tip"},F=n("p",{class:"custom-container-title"},"网站资源",-1),W={href:"https://docs.python.org/zh-cn/3/library/configparser.html",target:"_blank",rel:"noopener noreferrer"},E=o(`<p>基本使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> configparser
cf <span class="token operator">=</span> configparser<span class="token punctuation">.</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
cf<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">&quot;git2.ini&quot;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 获取所有配置项</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>sections<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 获取特定配置项</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">&#39;git_ssh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 获取键值对</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> cf<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token string">&#39;git_ssh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token comment"># 获取特定值</span>
val <span class="token operator">=</span> cf<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;git_ssh&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token comment"># val = cf.getint(&#39;git_ssh&#39;,&#39;tool&#39;)</span>

<span class="token comment"># 设置</span>
cf<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;git_ssh&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;tttt&#39;</span><span class="token punctuation">)</span>
cf<span class="token punctuation">.</span>add_section<span class="token punctuation">(</span><span class="token string">&quot;newsection&quot;</span><span class="token punctuation">)</span>
cf<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;newsection&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;new_key&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;new_value&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;git2.ini&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    cf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">)</span>

<span class="token comment"># 判断是否存在</span>
<span class="token keyword">if</span> cf<span class="token punctuation">.</span>has_section<span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">if</span> cf<span class="token punctuation">.</span>has_option<span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> yaml</h3><blockquote><p>安装</p></blockquote><p>在Python中，你可以使用<code>PyYAML</code>库来读取和解析YAML配置文件。<code>PyYAML</code>是一个流行的Python库，用于处理YAML格式的数据。</p><p>首先，确保你已经安装了<code>PyYAML</code>库。你可以使用以下命令来安装它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pyyaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>基本使用</p></blockquote><p>当你使用<code>PyYAML</code>库来读取和修改YAML配置文件时，以下是一些常见的用法示例：</p><p><strong>读取YAML配置文件：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> yaml

<span class="token comment"># 读取YAML文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;config.yaml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    config <span class="token operator">=</span> yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>

<span class="token comment"># 打印整个配置</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>

<span class="token comment"># 访问特定键的值</span>
value <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 访问嵌套键的值</span>
nested_value <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">&#39;nested&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改YAML配置文件：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> yaml

<span class="token comment"># 读取YAML文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;config.yaml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    config <span class="token operator">=</span> yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>

<span class="token comment"># 修改配置值</span>
config<span class="token punctuation">[</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>

<span class="token comment"># 添加新的键值对</span>
config<span class="token punctuation">[</span><span class="token string">&#39;new_key&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;new value&#39;</span>

<span class="token comment"># 写入修改后的配置到文件</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;config.yaml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用<code>yaml.safe_load()</code>函数读取YAML配置文件，并将其解析为Python字典或列表。然后，我们可以使用字典的索引来访问特定键的值，并进行修改或添加新的键值对。最后，我们使用<code>yaml.dump()</code>函数将修改后的配置写回到文件中。</p><p>请确保在读取和写入YAML文件时使用正确的语法和格式。</p><h2 id="文件下载" tabindex="-1"><a class="header-anchor" href="#文件下载" aria-hidden="true">#</a> 文件下载</h2><h3 id="wget" tabindex="-1"><a class="header-anchor" href="#wget" aria-hidden="true">#</a> wget</h3><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token function">wget</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基本用法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> wget
<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        wget<span class="token punctuation">.</span>download<span class="token punctuation">(</span>url<span class="token punctuation">,</span>out<span class="token operator">=</span>path<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数学相关" tabindex="-1"><a class="header-anchor" href="#数学相关" aria-hidden="true">#</a> 数学相关</h2><h3 id="复数-cmath" tabindex="-1"><a class="header-anchor" href="#复数-cmath" aria-hidden="true">#</a> 复数:cmath</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>提供复数的处理</p></div><h2 id="web库" tabindex="-1"><a class="header-anchor" href="#web库" aria-hidden="true">#</a> Web库</h2><h3 id="aiohttp" tabindex="-1"><a class="header-anchor" href="#aiohttp" aria-hidden="true">#</a> aiohttp</h3>`,26),V={href:"https://github.com/aio-libs/aiohttp",target:"_blank",rel:"noopener noreferrer"},R=o(`<p>异步web服务库</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install aiohttp
<span class="token comment"># 字符检测库</span>
pip3 install aiohttp
<span class="token comment"># DNS解析加速</span>
pip3 install cchardet aiodns
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="爬虫模块" tabindex="-1"><a class="header-anchor" href="#爬虫模块" aria-hidden="true">#</a> 爬虫模块</h2><h3 id="webbrowser" tabindex="-1"><a class="header-anchor" href="#webbrowser" aria-hidden="true">#</a> webbrowser</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> webbrowser

webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useragent库-fake-useragent" tabindex="-1"><a class="header-anchor" href="#useragent库-fake-useragent" aria-hidden="true">#</a> UserAgent库:fake-useragent</h3><p>user-agent库</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install fake<span class="token operator">-</span>usetagent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-PYTHON line-numbers-mode" data-ext="PYTHON"><pre class="language-PYTHON"><code>from fake_useragent import UserAgent

ua = UserAgent()
if __name__ == &#39;__main__&#39;:
    print(ua.random)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件处理库" tabindex="-1"><a class="header-anchor" href="#文件处理库" aria-hidden="true">#</a> 文件处理库</h2><h3 id="pathlib" tabindex="-1"><a class="header-anchor" href="#pathlib" aria-hidden="true">#</a> pathlib</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path

my_file <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">&quot;/path/to/file&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> my_file<span class="token punctuation">.</span>is_file<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定的文件存在</span>
<span class="token keyword">if</span> my_file<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定的目录存在</span>
<span class="token keyword">if</span> my_file<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 指定的文件或目录存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tempfile-临时文件库" tabindex="-1"><a class="header-anchor" href="#tempfile-临时文件库" aria-hidden="true">#</a> tempfile(临时文件库)</h3><p>Python 的 <code>tempfile</code> 库提供了用于创建临时文件和目录的功能。它是标准库中的一部分，不需要额外安装。</p><p><code>tempfile</code> 库的主要作用是在程序运行时创建临时文件或目录，并确保它们在不再使用时被正确地删除，以避免临时文件和目录的积聚和浪费磁盘空间。它通常在需要暂时存储数据或进行临时计算时使用。</p><p>下面是 <code>tempfile</code> 库的一些常用函数和方法：</p><ol><li><code>tempfile.NamedTemporaryFile</code>: 创建一个具有唯一文件名的临时文件，可以写入和读取数据。文件关闭后会自动删除。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> tempfile

<span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> temp_file<span class="token punctuation">:</span>
    temp_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;Hello, world!&#39;</span><span class="token punctuation">)</span>
    temp_file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>temp_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 临时文件会在这里自动删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>tempfile.TemporaryFile</code>: 创建一个匿名的临时文件，可用于写入和读取数据。文件关闭后会自动删除。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> tempfile

<span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>TemporaryFile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> temp_file<span class="token punctuation">:</span>
    temp_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;Hello, world!&#39;</span><span class="token punctuation">)</span>
    temp_file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>temp_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 匿名临时文件会在这里自动删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>tempfile.mkstemp</code>: 创建一个具有唯一文件名的临时文件，返回该文件的文件描述符和文件路径。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> tempfile

fd<span class="token punctuation">,</span> file_path <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>mkstemp<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> temp_file<span class="token punctuation">:</span>
    temp_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span>
    temp_file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>temp_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 临时文件会在这里自动删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>tempfile.mkdtemp</code>: 创建一个具有唯一目录名的临时目录，返回该目录的路径。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> tempfile

temp_dir <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>mkdtemp<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>temp_dir<span class="token punctuation">)</span>
<span class="token comment"># 临时目录会在这里自动删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>tempfile.gettempdir</code>: 获取系统的默认临时目录路径。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">import</span> tempfile

temp_dir <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>gettempdir<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>temp_dir<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些函数和方法可以帮助你在 Python 程序中方便地处理临时文件和目录，确保在使用完毕后正确地进行清理。</p><h3 id="shutil" tabindex="-1"><a class="header-anchor" href="#shutil" aria-hidden="true">#</a> shutil</h3><p>Python 的 <code>shutil</code>（shell utility）库是一个文件和目录操作的标准库。它提供了许多用于复制、移动、删除文件和目录等操作的函数，使得文件和目录操作更加简单和方便。</p><h2 id="可视化" tabindex="-1"><a class="header-anchor" href="#可视化" aria-hidden="true">#</a> 可视化</h2><h3 id="pygal" tabindex="-1"><a class="header-anchor" href="#pygal" aria-hidden="true">#</a> pygal</h3><p><code>pygal</code> 是一个用于生成交互式矢量图表的 Python 库。它提供了多种类型的图表，包括线图、柱状图、饼图、雷达图、地图等，并且支持定制化样式和交互式功能。<code>pygal</code> 的输出是矢量图形，可以轻松地嵌入到网页中或保存为图片文件。</p><h2 id="时间与日期" tabindex="-1"><a class="header-anchor" href="#时间与日期" aria-hidden="true">#</a> 时间与日期</h2><ul><li>calendar</li><li>datetime</li><li>time</li></ul><h2 id="数据类型库" tabindex="-1"><a class="header-anchor" href="#数据类型库" aria-hidden="true">#</a> 数据类型库</h2><h3 id="frozenszet-不可变集合数据" tabindex="-1"><a class="header-anchor" href="#frozenszet-不可变集合数据" aria-hidden="true">#</a> frozenszet(不可变集合数据)</h3><p>在 Python 中，<code>frozenset</code> 是一种不可变的集合数据类型。与普通的集合 <code>set</code> 相比，<code>frozenset</code> 不能被修改，即一旦创建，就无法添加、删除或修改其元素。由于其不可变性，<code>frozenset</code> 可以用作字典的键或其他需要不可变对象的场景。以下是关于 <code>frozenset</code> 的一些基本信息和使用示例：</p><p><strong>创建 <code>frozenset</code>：</strong> 你可以使用 <code>frozenset()</code> 函数来创建一个不可变的集合。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
my_frozenset <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>访问 <code>frozenset</code>：</strong> 由于 <code>frozenset</code> 是不可变的，你可以像普通的集合一样使用它来进行成员检查。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token keyword">if</span> <span class="token number">2</span> <span class="token keyword">in</span> my_frozenset<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;2 is in the frozenset&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不可变性：</strong> 由于 <code>frozenset</code> 不可变，不能执行添加、删除等操作。任何尝试修改 <code>frozenset</code> 的操作都会引发错误。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
<span class="token comment"># 下面的代码会引发 AttributeError</span>
my_frozenset<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用作字典键：</strong> 由于 <code>frozenset</code> 是不可变的，可以用作字典的键。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
my_dict <span class="token operator">=</span> <span class="token punctuation">{</span>my_frozenset<span class="token punctuation">:</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>集合运算：</strong> <code>frozenset</code> 支持集合运算，例如交集、并集、差集等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pythonCopy code
set1 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
set2 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

intersection <span class="token operator">=</span> set1 <span class="token operator">&amp;</span> set2  <span class="token comment"># 交集</span>
union <span class="token operator">=</span> set1 <span class="token operator">|</span> set2  <span class="token comment"># 并集</span>
difference <span class="token operator">=</span> set1 <span class="token operator">-</span> set2  <span class="token comment"># 差集</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，<code>frozenset</code> 是一个不可变的集合数据类型，适用于需要不可变性的场景。它可以用作字典的键、集合运算等，但由于其不可变性，无法进行修改操作。</p>`,48);function J(X,K){const e=i("router-link"),p=i("ExternalLinkIcon");return c(),u("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#库索引"},{default:t(()=>[s("库索引")]),_:1})]),n("li",null,[a(e,{to:"#标准库"},{default:t(()=>[s("标准库")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#sys"},{default:t(()=>[s("sys")]),_:1})]),n("li",null,[a(e,{to:"#typing-类型注解"},{default:t(()=>[s("typing(类型注解)")]),_:1})]),n("li",null,[a(e,{to:"#collections"},{default:t(()=>[s("collections⭐")]),_:1})]),n("li",null,[a(e,{to:"#io"},{default:t(()=>[s("Io")]),_:1})])])]),n("li",null,[a(e,{to:"#工具库"},{default:t(()=>[s("工具库")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#日志工具"},{default:t(()=>[s("日志工具")]),_:1})]),n("li",null,[a(e,{to:"#代码工具"},{default:t(()=>[s("代码工具")]),_:1})])])]),n("li",null,[a(e,{to:"#格式化输出"},{default:t(()=>[s("格式化输出")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#pprint"},{default:t(()=>[s("pprint")]),_:1})])])]),n("li",null,[a(e,{to:"#gui库"},{default:t(()=>[s("GUI库")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#pyqt5"},{default:t(()=>[s("PyQt5")]),_:1})]),n("li",null,[a(e,{to:"#tkinter"},{default:t(()=>[s("Tkinter")]),_:1})]),n("li",null,[a(e,{to:"#streamlit"},{default:t(()=>[s("Streamlit")]),_:1})])])]),n("li",null,[a(e,{to:"#数据处理"},{default:t(()=>[s("数据处理")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#base64-二进制处理"},{default:t(()=>[s("base64(二进制处理)")]),_:1})]),n("li",null,[a(e,{to:"#数据持久化-pickle"},{default:t(()=>[s("数据持久化:pickle")]),_:1})]),n("li",null,[a(e,{to:"#数据转换-json"},{default:t(()=>[s("数据转换:JSON")]),_:1})]),n("li",null,[a(e,{to:"#队列-queue"},{default:t(()=>[s("队列:queue")]),_:1})]),n("li",null,[a(e,{to:"#url处理-urllib"},{default:t(()=>[s("URL处理:urllib")]),_:1})]),n("li",null,[a(e,{to:"#二分查找-bisect"},{default:t(()=>[s("二分查找:bisect")]),_:1})]),n("li",null,[a(e,{to:"#正则表达式-re"},{default:t(()=>[s("正则表达式:re")]),_:1})]),n("li",null,[a(e,{to:"#搜索比较类库-difflib"},{default:t(()=>[s("搜索比较类库:difflib")]),_:1})]),n("li",null,[a(e,{to:"#world处理-python-docx"},{default:t(()=>[s("World处理：python-docx")]),_:1})]),n("li",null,[a(e,{to:"#迭代器-itertools"},{default:t(()=>[s("迭代器(itertools)")]),_:1})])])]),n("li",null,[a(e,{to:"#图片处理"},{default:t(()=>[s("图片处理")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#pillow"},{default:t(()=>[s("pillow")]),_:1})]),n("li",null,[a(e,{to:"#tar文件处理-tarfile"},{default:t(()=>[s("tar文件处理(tarfile)")]),_:1})])])]),n("li",null,[a(e,{to:"#数据库工具"},{default:t(()=>[s("数据库工具")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#mysql-connector-python"},{default:t(()=>[s("mysql-connector-python")]),_:1})]),n("li",null,[a(e,{to:"#pymysql"},{default:t(()=>[s("pymysql")]),_:1})]),n("li",null,[a(e,{to:"#sqlalchemy"},{default:t(()=>[s("sqlalchemy")]),_:1})]),n("li",null,[a(e,{to:"#peewee"},{default:t(()=>[s("peewee")]),_:1})])])]),n("li",null,[a(e,{to:"#命令行工具"},{default:t(()=>[s("命令行工具")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#os-system"},{default:t(()=>[s("os.system")]),_:1})]),n("li",null,[a(e,{to:"#optparse"},{default:t(()=>[s("optparse")]),_:1})]),n("li",null,[a(e,{to:"#argparse"},{default:t(()=>[s("argparse")]),_:1})]),n("li",null,[a(e,{to:"#xonsh"},{default:t(()=>[s("xonsh")]),_:1})])])]),n("li",null,[a(e,{to:"#并发"},{default:t(()=>[s("并发")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#多线程-threading"},{default:t(()=>[s("多线程:threading")]),_:1})]),n("li",null,[a(e,{to:"#多进程-multiprocessing"},{default:t(()=>[s("多进程:multiprocessing")]),_:1})]),n("li",null,[a(e,{to:"#调度其他程序-subprocess"},{default:t(()=>[s("调度其他程序:subprocess")]),_:1})])])]),n("li",null,[a(e,{to:"#配置文件"},{default:t(()=>[s("配置文件")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#ini"},{default:t(()=>[s("ini")]),_:1})]),n("li",null,[a(e,{to:"#yaml"},{default:t(()=>[s("yaml")]),_:1})])])]),n("li",null,[a(e,{to:"#文件下载"},{default:t(()=>[s("文件下载")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#wget"},{default:t(()=>[s("wget")]),_:1})])])]),n("li",null,[a(e,{to:"#数学相关"},{default:t(()=>[s("数学相关")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#复数-cmath"},{default:t(()=>[s("复数:cmath")]),_:1})])])]),n("li",null,[a(e,{to:"#web库"},{default:t(()=>[s("Web库")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#aiohttp"},{default:t(()=>[s("aiohttp")]),_:1})])])]),n("li",null,[a(e,{to:"#爬虫模块"},{default:t(()=>[s("爬虫模块")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#webbrowser"},{default:t(()=>[s("webbrowser")]),_:1})]),n("li",null,[a(e,{to:"#useragent库-fake-useragent"},{default:t(()=>[s("UserAgent库:fake-useragent")]),_:1})])])]),n("li",null,[a(e,{to:"#文件处理库"},{default:t(()=>[s("文件处理库")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#pathlib"},{default:t(()=>[s("pathlib")]),_:1})]),n("li",null,[a(e,{to:"#tempfile-临时文件库"},{default:t(()=>[s("tempfile(临时文件库)")]),_:1})]),n("li",null,[a(e,{to:"#shutil"},{default:t(()=>[s("shutil")]),_:1})])])]),n("li",null,[a(e,{to:"#可视化"},{default:t(()=>[s("可视化")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#pygal"},{default:t(()=>[s("pygal")]),_:1})])])]),n("li",null,[a(e,{to:"#时间与日期"},{default:t(()=>[s("时间与日期")]),_:1})]),n("li",null,[a(e,{to:"#数据类型库"},{default:t(()=>[s("数据类型库")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#frozenszet-不可变集合数据"},{default:t(()=>[s("frozenszet(不可变集合数据)")]),_:1})])])])])]),v,n("p",null,[s("这只是 "),m,s(" 模块功能的一部分，有很多其他的函数和变量可以提供对 Python 解释器的访问和控制。为了获取完整的功能列表，你可以查看 "),n("a",b,[s("Python 官方文档"),a(p)]),s(" 中关于 "),h,s(" 模块的部分。")]),g,n("p",null,[s("🌐"),n("a",y,[s("文档"),a(p)])]),f,n("p",null,[n("a",_,[s("官网"),a(p)])]),n("p",null,[n("a",w,[s("中文文档"),a(p)])]),q,n("p",null,[n("a",x,[s("Github"),a(p)])]),n("p",null,[n("a",P,[s("文档"),a(p)])]),T,n("p",null,[n("a",C,[s("白月黑羽 (byhy.net)"),a(p)])]),A,n("p",null,[n("a",S,[s("tkinter —— Tcl/Tk 的 Python 接口 — Python 3.11.2 文档"),a(p)])]),z,n("div",j,[L,n("p",null,[n("a",M,[s("github"),a(p)])]),n("p",null,[n("a",O,[s("doc"),a(p)])])]),D,n("div",I,[Y,n("p",null,[n("a",H,[s("文档"),a(p)])]),n("p",null,[n("a",N,[s("github"),a(p)])])]),B,n("p",null,[n("a",Q,[s("GitHub - xonsh/xonsh: Python-powered, cross-platform, Unix-gazing shell"),a(p)])]),U,n("div",G,[F,n("p",null,[n("a",W,[s("configparser --- 配置文件解析器 — Python 3.10.2 文档"),a(p)])])]),E,n("p",null,[n("a",V,[s("github"),a(p)])]),R])}const $=l(d,[["render",J],["__file","Python库.html.vue"]]);export{$ as default};
