import{_ as p,r as t,o,c,a as n,b as s,d as e,e as l}from"./app-f6817a80.js";const i={},d=n("h1",{id:"mysql数据库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql数据库","aria-hidden":"true"},"#"),s(" MySQL数据库")],-1),u={class:"custom-container tip"},r=n("p",{class:"custom-container-title"},"网站",-1),k={href:"https://www.runoob.com/mysql/mysql-tutorial.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://dev.mysql.com/downloads/mysql/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/",target:"_blank",rel:"noopener noreferrer"},b=l(`<h2 id="数据库安装" tabindex="-1"><a class="header-anchor" href="#数据库安装" aria-hidden="true">#</a> 数据库安装</h2><h3 id="ubuntu" tabindex="-1"><a class="header-anchor" href="#ubuntu" aria-hidden="true">#</a> Ubuntu</h3><h4 id="ubuntu-20" tabindex="-1"><a class="header-anchor" href="#ubuntu-20" aria-hidden="true">#</a> Ubuntu 20</h4><p>deb安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://repo.mysql.com//mysql-apt-config_0.8.22-1_all.deb
dpkg <span class="token parameter variable">-i</span> mysql-apt-config_0.8.22-1_all.deb
<span class="token comment"># install MySQL Server</span>
<span class="token function">apt-get</span> update
<span class="token function">apt-get</span> insatll mysql-server
ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;localhost&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;你的密码&#39;</span><span class="token punctuation">;</span>
<span class="token comment"># error fix </span>
<span class="token function">apt-get</span> --fix-broken <span class="token function">install</span>

<span class="token comment"># 开启远程连接服务</span>
mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
use mysql<span class="token punctuation">;</span>
update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">&#39;%&#39;</span> where user <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
flush privileges<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看服务状态</span>
<span class="token function">service</span> mysql status
<span class="token comment"># 停止服务</span>
<span class="token function">service</span> mysql stop
<span class="token comment"># 启动服务</span>
<span class="token function">service</span> mysql start
<span class="token comment"># 重启服务</span>
<span class="token function">service</span> mysql restart
<span class="token comment"># 登录</span>
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>卸载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> purge mysql-*
<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/mysql/ /var/lib/mysql
<span class="token function">sudo</span> <span class="token function">apt</span> autoremove
<span class="token function">sudo</span> <span class="token function">apt</span> autoclean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库配置" tabindex="-1"><a class="header-anchor" href="#数据库配置" aria-hidden="true">#</a> 数据库配置</h2><h3 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /etc/mysql/mysql.conf.d/
<span class="token function">sudo</span> <span class="token function">vim</span> mysqld.cnf
transaction-isolation<span class="token operator">=</span>READ-COMMITTED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并发需要设置隔离级别</p><h2 id="表操作" tabindex="-1"><a class="header-anchor" href="#表操作" aria-hidden="true">#</a> 表操作</h2><h3 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
    gender <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;性别 1男，2女&#39;</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;学生表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据操作" tabindex="-1"><a class="header-anchor" href="#数据操作" aria-hidden="true">#</a> 数据操作</h2><h3 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h3><h4 id="循环插入数据" tabindex="-1"><a class="header-anchor" href="#循环插入数据" aria-hidden="true">#</a> 循环插入数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delimiter</span> <span class="token comment">//</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> insert_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">declare</span> num <span class="token keyword">int</span><span class="token punctuation">;</span>
    <span class="token keyword">set</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span>
        num<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token keyword">do</span>
        <span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> create_time<span class="token punctuation">)</span> <span class="token keyword">value</span> <span class="token punctuation">(</span>rand_name<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">set</span> num <span class="token operator">=</span> num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token comment">//</span>
<span class="token keyword">call</span> insert_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库函数" tabindex="-1"><a class="header-anchor" href="#数据库函数" aria-hidden="true">#</a> 数据库函数</h2><h3 id="随机数据" tabindex="-1"><a class="header-anchor" href="#随机数据" aria-hidden="true">#</a> 随机数据</h3><h4 id="生成随机人名" tabindex="-1"><a class="header-anchor" href="#生成随机人名" aria-hidden="true">#</a> 生成随机人名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开启允许创建函数</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> log_bin_trust_function_creators <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建随机生成姓名函数 rand_name</span>
<span class="token keyword">delimiter</span> $$
<span class="token keyword">create</span> <span class="token keyword">function</span> rand_name<span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token comment">-- 初始化一个16姓氏字符串，作为姓氏字符库</span>
    <span class="token keyword">declare</span> family_str <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;赵钱孙李周吴郑王冯陈蒋沈韩杨朱秦&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">-- 初始化一个32名字字符串，作为名字字符库</span>
    <span class="token keyword">declare</span> name_str <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;平书文若山向秋凡白斌绮烟从蕾天曼润又亦从语绮彤之玉凡梅依琴沛槐敏&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">-- 记录当前是第几个</span>
    <span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">-- 记录生成结果</span>
    <span class="token keyword">declare</span> full_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">-- 随机名字1、2位标记</span>
    <span class="token keyword">declare</span> rand_num <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n <span class="token keyword">do</span>
            <span class="token comment">-- 若获取多个姓名，则用逗号&#39;,&#39;区分</span>
            <span class="token keyword">set</span> full_name <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span>full_name<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> full_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">-- 随机取姓氏</span>
            <span class="token keyword">set</span> full_name <span class="token operator">=</span> concat<span class="token punctuation">(</span>full_name<span class="token punctuation">,</span> SUBSTR<span class="token punctuation">(</span>family_str<span class="token punctuation">,</span> floor<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">-- 随机取名字</span>
            <span class="token keyword">set</span> full_name <span class="token operator">=</span> concat<span class="token punctuation">(</span>full_name<span class="token punctuation">,</span> SUBSTR<span class="token punctuation">(</span>name_str<span class="token punctuation">,</span> floor<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">-- 名字是否为双字</span>
            <span class="token keyword">set</span> rand_num <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">set</span> full_name <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rand_num <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">,</span> concat<span class="token punctuation">(</span>full_name<span class="token punctuation">,</span> SUBSTR<span class="token punctuation">(</span>name_str<span class="token punctuation">,</span> floor<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> full_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">set</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> full_name<span class="token punctuation">;</span>

<span class="token keyword">end</span>$$
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
<span class="token keyword">select</span> rand_name<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="随机数字" tabindex="-1"><a class="header-anchor" href="#随机数字" aria-hidden="true">#</a> 随机数字</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 500-1000的随机整数</span>
<span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token number">500</span><span class="token operator">+</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 1-2的随机整数</span>
<span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间函数" tabindex="-1"><a class="header-anchor" href="#时间函数" aria-hidden="true">#</a> 时间函数</h3><h4 id="时间加减" tabindex="-1"><a class="header-anchor" href="#时间加减" aria-hidden="true">#</a> 时间加减</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>第一种用法: 加天数

<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//加1天</span>
第二种用法: 加毫秒、秒、分、时、天、周、月、季、年

<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> microsecond<span class="token punctuation">)</span> <span class="token comment">//加1毫秒</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">second</span><span class="token punctuation">)</span> <span class="token comment">//加1秒</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">minute</span><span class="token punctuation">)</span> <span class="token comment">//加1分钟</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">hour</span><span class="token punctuation">)</span> <span class="token comment">//加1小时</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">day</span><span class="token punctuation">)</span> <span class="token comment">//加1天</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> week<span class="token punctuation">)</span> <span class="token comment">//加1周</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">month</span><span class="token punctuation">)</span> <span class="token comment">//加1月</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> quarter<span class="token punctuation">)</span> <span class="token comment">//加1季</span>
<span class="token keyword">select</span> adddate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">year</span><span class="token punctuation">)</span> <span class="token comment">//加1年</span>
subdate<span class="token punctuation">(</span><span class="token punctuation">)</span>
第一种用法: 减天数

<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//减1天</span>
第二种用法: 减毫秒、秒、分、时、天、周、月、季、年

<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> microsecond<span class="token punctuation">)</span> <span class="token comment">//减1毫秒</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">second</span><span class="token punctuation">)</span> <span class="token comment">//减1秒</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">minute</span><span class="token punctuation">)</span> <span class="token comment">//减1分钟</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">hour</span><span class="token punctuation">)</span> <span class="token comment">//减1小时</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">day</span><span class="token punctuation">)</span> <span class="token comment">//减1天</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> week<span class="token punctuation">)</span> <span class="token comment">//减1周</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">month</span><span class="token punctuation">)</span> <span class="token comment">//减1月</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> quarter<span class="token punctuation">)</span> <span class="token comment">//减1季</span>
<span class="token keyword">select</span> subdate<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token number">1</span> <span class="token keyword">year</span><span class="token punctuation">)</span> <span class="token comment">//减1年</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="时间差值" tabindex="-1"><a class="header-anchor" href="#时间差值" aria-hidden="true">#</a> 时间差值</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> timestampdiff<span class="token punctuation">(</span><span class="token keyword">SECOND</span><span class="token punctuation">,</span><span class="token string">&#39;2022-09-19 16:41:23&#39;</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">1</span>、FRAC_SECOND 表示间隔是毫秒
<span class="token number">2</span>、<span class="token keyword">SECOND</span> 秒
<span class="token number">3</span>、<span class="token keyword">MINUTE</span> 分钟
<span class="token number">4</span>、<span class="token keyword">HOUR</span> 小时
<span class="token number">5</span>、<span class="token keyword">DAY</span> 天
<span class="token number">6</span>、WEEK 星期
<span class="token number">7</span>、<span class="token keyword">MONTH</span> 月
<span class="token number">8</span>、QUARTER 季度
<span class="token number">9</span>、<span class="token keyword">YEAR</span> 年
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="建库原则" tabindex="-1"><a class="header-anchor" href="#建库原则" aria-hidden="true">#</a> 建库原则</h2><h3 id="_1-名字" tabindex="-1"><a class="header-anchor" href="#_1-名字" aria-hidden="true">#</a> 1.名字</h3><p>建表的时候，给<code>表</code>、<code>字段</code>和<code>索引</code>起个好名字，真的太重要了。</p><h4 id="_1-1-见名知意" tabindex="-1"><a class="header-anchor" href="#_1-1-见名知意" aria-hidden="true">#</a> 1.1 见名知意</h4><p>名字就像<code>表</code>、<code>字段</code>和<code>索引</code>的一张脸，可以给人留下第一印象。</p><p>好的名字，言简意赅，见名知意，让人心情愉悦，能够提高沟通和维护成本。</p><p>坏的名字，模拟两可，不知所云。而且显得杂乱无章，看得让人抓狂。</p><p><strong>反例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>用户名称字段定义成：yong_hu_ming、用户_name、name、user_name_123456789
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你看了可能会一脸懵逼，这是什么骚操作？</p><p><strong>正例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>用户名称字段定义成：user_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>温馨提醒一下，名字也不宜过长，尽量控制在<code>30</code>个字符以内。</p></blockquote><h4 id="_1-2-大小写" tabindex="-1"><a class="header-anchor" href="#_1-2-大小写" aria-hidden="true">#</a> 1.2 大小写</h4><p>名字可以用<code>小写字母</code>，因为从视觉上，小写字母更容易让人读懂。</p><p><strong>反例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>字段名：PRODUCT_NAME、PRODUCT_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>全部大写，看起来有点不太直观。而一部分大写，一部分小写，让人看着更不爽。</p><p><strong>正例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>字段名：product_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>名字还是使用全小写字母，看着更舒服。</p><h4 id="_1-3-分隔符" tabindex="-1"><a class="header-anchor" href="#_1-3-分隔符" aria-hidden="true">#</a> 1.3 分隔符</h4><p>很多时候，名字为了让人好理解，有可能会包含多个单词。</p><p>那么，多个单词间的<code>分隔符</code>该用什么呢？</p><p><strong>反例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>字段名：productname、productName、product name、product<span class="token variable">@name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>单词间没有分隔，或者单词间用驼峰标识，或者单词间用空格分隔，或者单词间用@分隔，这几种方式都不太建议。</p><p><strong>正例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>字段名：product_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以考虑在单词间用<code>_</code>分隔。</p><h4 id="_1-4-表名" tabindex="-1"><a class="header-anchor" href="#_1-4-表名" aria-hidden="true">#</a> 1.4 表名</h4><p>对于表名，在言简意赅，见名知意的基础之上，建议带上<code>业务前缀</code>。</p><p>如果是订单相关的业务表，可以在表名前面加个前缀：<code>order_</code>。</p><p>例如：order_pay、order_pay_detail等。</p><p>如果是商品相关的业务表，可以在表名前面加个前缀：<code>product_</code>。</p><p>例如：product_spu，product_sku等。</p><p>这样做的好处是为了方便归类，把相同业务的表，可以非常快速的聚集到一起。</p><p>另外，还有有个好处是，如果哪天有非订单的业务，比如：金融业务，也需要建一个名字叫做pay的表，可以取名：finance_pay，就能非常轻松的区分。</p><p>这样就不会出现<code>同名表</code>的情况。</p><h4 id="_1-5-字段名称" tabindex="-1"><a class="header-anchor" href="#_1-5-字段名称" aria-hidden="true">#</a> 1.5 字段名称</h4><p><code>字段名称</code>是开发人员发挥空间最大，但也最容易发生混乱的地方。</p><p>比如有些表，使用flag表示状态，另外的表用status表示状态。</p><p>可以统一一下，使用status表示状态。</p><p>如果一个表使用了另一个表的主键，可以在另一张表的名后面，加<code>_id</code>或<code>_sys_no</code>，例如：</p><p>在product_sku表中有个字段，是product_spu表的主键，这时候可以取名：product_spu_id或product_spu_sys_no。</p><p>还有创建时间，可以统一成：create_time，修改时间统一成：update_time。</p><p>删除状态固定为：delete_status。</p><p>其实还有很多公共字段，在不同的表之间，可以使用全局统一的命名规则，定义成相同的名称，以便于大家好理解。</p><h4 id="_1-6-索引名" tabindex="-1"><a class="header-anchor" href="#_1-6-索引名" aria-hidden="true">#</a> 1.6 索引名</h4><p>在数据库中，索引有很多种，包括：主键、普通索引、唯一索引、联合索引等。</p><p>每张表的主键只有一个，一般使用：<code>id</code>或者<code>sys_no</code>命名。</p><p>普通索引和联合索引，其实是一类。在建立该类索引时，可以加<code>ix_</code>前缀，比如：ix_product_status。</p><p>唯一索引，可以加<code>ux_</code>前缀，比如：ux_product_code。</p><h3 id="_2-字段类型" tabindex="-1"><a class="header-anchor" href="#_2-字段类型" aria-hidden="true">#</a> 2.字段类型</h3><p>在设计表时，我们在选择<code>字段类型</code>时，可发挥空间很大。</p><p>时间格式的数据有：date、datetime和timestamp等等可以选择。</p><p>字符类型的数据有：varchar、char、text等可以选择。</p><p>数字类型的数据有：int、bigint、smallint、tinyint等可以选择。</p><p>说实话，选择很多，有时候是一件好事，也可能是一件坏事。</p><p>如何选择一个<code>合适</code>的字段类型，变成了我们不得不面对的问题。</p><p>如果字段类型选大了，比如：原本只有1-10之间的10个数字，结果选了<code>bigint</code>，它占<code>8</code>个字节。</p><p>其实，1-10之间的10个数字，每个数字<code>1</code>个字节就能保存，选择<code>tinyint</code>更为合适。</p><p>这样会白白浪费7个字节的空间。</p><p>如果字段类型择小了，比如：一个18位的id字段，选择了<code>int</code>类型，最终数据会保存失败。</p><p>所以选择一个合适的字段类型，还是非常重要的一件事情。</p><p>以下原则可以参考一下：</p><ol><li>尽可能选择占用存储空间小的字段类型，在满足正常业务需求的情况下，从小到大，往上选。</li><li>如果字符串长度固定，或者差别不大，可以选择char类型。如果字符串长度差别较大，可以选择varchar类型。</li><li>是否字段，可以选择bit类型。</li><li>枚举字段，可以选择tinyint类型。</li><li>主键字段，可以选择bigint类型。</li><li>金额字段，可以选择decimal类型。</li><li>时间字段，可以选择timestamp或datetime类型。</li></ol><h3 id="_3-字段长度" tabindex="-1"><a class="header-anchor" href="#_3-字段长度" aria-hidden="true">#</a> 3.字段长度</h3><p>前面我们已经定义好了<code>字段名称</code>，选择了合适的<code>字段类型</code>，接下来，需要重点关注的是<code>字段长度</code>了。</p><p>比如：varchar(20)，biginit(20)等。</p><p>那么问题来了，<code>varchar</code>代表的是<code>字节</code>长度，还是<code>字符</code>长度呢？</p><p>答：在mysql中除了<code>varchar</code>和<code>char</code>是代表<code>字符</code>长度之外，其余的类型都是代表<code>字节</code>长度。</p><p>biginit(n) 这个<code>n</code>表示什么意思呢？</p><p>假如我们定义的字段类型和长度是：bigint(4)，bigint实际长度是<code>8</code>个字节。</p><p>现在有个数据a=1，a显示4个字节，所以在不满4个字节时前面填充0（前提是该字段设置了zerofill属性），比如：0001。</p><p>当满了4个字节时，比如现在数据是a=123456，它会按照实际的长度显示，比如：123456。</p><p>但需要注意的是，有些mysql客户端即使满了4个字节，也可能只显示4个字节的内容，比如会显示成：1234。</p><p>所以bigint(4)，这里的4表示显示的长度为4个字节，实际长度还是占8个字节。</p><h3 id="_4-字段个数" tabindex="-1"><a class="header-anchor" href="#_4-字段个数" aria-hidden="true">#</a> 4.字段个数</h3><p>我们在建表的时候，一定要对<code>字段个数</code>做一些限制。</p><p>我之前见过有人创建的表，有几十个，甚至上百个字段，表中保存的数据非常大，查询效率很低。</p><p>如果真有这种情况，可以将一张<code>大表</code>拆成多张<code>小表</code>，这几张表的主键相同。</p><p>建议每表的字段个数，不要超过<code>20</code>个。</p><h3 id="_5-主键" tabindex="-1"><a class="header-anchor" href="#_5-主键" aria-hidden="true">#</a> 5. 主键</h3><p>在创建表时，一定要创建<code>主键</code>。</p><p>因为主键自带了主键索引，相比于其他索引，主键索引的查询效率最高，因为它不需要回表。</p><p>此外，主键还是天然的<code>唯一索引</code>，可以根据它来判重。</p><p>在<code>单个</code>数据库中，主键可以通过<code>AUTO_INCREMENT</code>，设置成<code>自动增长</code>的。</p><p>但在<code>分布式</code>数据库中，特别是做了分库分表的业务库中，主键最好由外部算法(比如：雪花算法）生成，它能够保证生成的id是全局唯一的。</p><p>除此之外，主键建议保存跟业务无关的值，减少业务耦合性，方便今后的扩展。</p><p>不过我也见过，有些一对一的表关系，比如：用户表和用户扩展表，在保存数据时是一对一的关系。</p><p>这样，用户扩展表的主键，可以直接保存用户表的主键。</p><h3 id="_6-存储引擎" tabindex="-1"><a class="header-anchor" href="#_6-存储引擎" aria-hidden="true">#</a> 6.存储引擎</h3><p>在<code>mysql5.1</code>以前的版本，默认的存储引擎是<code>myslam</code>，而<code>mysql5.1</code>以后的版本，默认的存储引擎变成了<code>innodb</code>。</p><p>之前我们还在创建表时，还一直纠结要选哪种存储引擎？</p><p><code>myslam</code>的索引和数据分开存储，而有利于查询，但它不支持事务和外键等功能。</p><p>而<code>innodb</code>虽说查询性能，稍微弱一点，但它支持事务和外键等，功能更强大一些。</p><p>以前的建议是：读多写少的表，用myslam存储引擎。而写多读多的表，用innodb。</p><p>但虽说mysql对innodb存储引擎性能的不断优化，现在myslam和innodb查询性能相差已经越来越小。</p><p>所以，建议我们在使用<code>mysql8</code>以后的版本时，直接使用默认的<code>innodb</code>存储引擎即可，无需额外修改存储引擎。</p><h3 id="_7-not-null" tabindex="-1"><a class="header-anchor" href="#_7-not-null" aria-hidden="true">#</a> 7. NOT NULL</h3><p>在创建字段时，需要选择该字段是否允许为<code>NULL</code>。</p><p>我们在定义字段时，应该尽可能明确该字段<code>NOT NULL</code>。</p><p>为什么呢？</p><p>我们主要以innodb存储引擎为例，myslam存储引擎没啥好说的。</p><p>主要有以下原因：</p><ol><li>在innodb中，需要额外的空间存储null值，需要占用更多的空间。</li><li>null值可能会导致索引失效。</li><li>null值只能用<code>is null</code>或者<code>is not null</code>判断，用<code>=号</code>判断永远返回false。</li></ol><p>因此，建议我们在定义字段时，能定义成NOT NULL，就定义成NOT NULL。</p><p>但如果某个字段直接定义成NOT NULL，万一有些地方忘了给该字段写值，就会<code>insert</code>不了数据。</p><p>这也算合理的情况。</p><p>但有一种情况是，系统有新功能上线，新增了字段。上线时一般会先执行sql脚本，再部署代码。</p><p>由于老代码中，不会给新字段赋值，则insert数据时，也会报错。</p><p>由此，非常有必要给NOT NULL的字段设置默认值，特别是后面新增的字段。</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> product_sku <span class="token keyword">add</span> <span class="token keyword">column</span>  brand_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-外键" tabindex="-1"><a class="header-anchor" href="#_8-外键" aria-hidden="true">#</a> 8.外键</h3><p>在mysql中，是存在<code>外键</code>的。</p><p>外键存在的主要作用是：保证数据的<code>一致性</code>和<code>完整性</code>。</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> class <span class="token punctuation">(</span>
  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
  cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个班级表class。</p><p>然后有个student表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  cid <span class="token keyword">int</span><span class="token punctuation">,</span>
  <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">references</span> class<span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中student表中的cid字段，保存的class表的id，这时通过<code>foreign key</code>增加了一个外键。</p><p>这时，如果你直接通过student表的id删除数据，会报异常：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>a <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">constraint</span> fails
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>必须要先删除class表对于的cid那条数据，再删除student表的数据才行，这样能够保证数据的一致性和完整性。</p><blockquote><p>顺便说一句：只有存储引擎是innodb时，才能使用外键。</p></blockquote><p>如果只有两张表的关联还好，但如果有十几张表都建了外键关联，每删除一次主表，都需要同步删除十几张子表，很显然性能会非常差。</p><p>因此，互联网系统中，一般建议不使用外键。因为这类系统更多的是为了性能考虑，宁可牺牲一点数据一致性和完整性。</p><p>除了<code>外键</code>之外，<code>存储过程</code>和<code>触发器</code>也不太建议使用，他们都会影响性能。</p><h3 id="_9-索引" tabindex="-1"><a class="header-anchor" href="#_9-索引" aria-hidden="true">#</a> 9. 索引</h3><p>在建表时，除了指定<code>主键索引</code>之外，还需要创建一些<code>普通索引</code>。</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> product_sku<span class="token punctuation">(</span>
  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
  spu_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  brand_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在创建商品表时，使用spu_id（商品组表）和brand_id（品牌表）的id。</p><p>像这类保存其他表id的情况，可以增加普通索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> product_sku <span class="token punctuation">(</span>
  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
  spu_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  brand_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>ix_spu_id<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>spu_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>ix_brand_id<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>brand_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后面查表的时候，效率更高。</p><p>但索引字段也不能建的太多，可能会影响保存数据的效率，因为索引需要额外的存储空间。</p><p>建议单表的索引个数不要超过：<code>5</code>个。</p><p>如果在建表时，发现索引个数超过5个了，可以删除部分<code>普通索引</code>，改成<code>联合索引</code>。</p><p>顺便说一句：在创建联合索引的时候，需要使用注意<code>最左匹配原则</code>，不然，建的联合索引效率可能不高。</p><p>对于数据重复率非常高的字段，比如：状态，不建议单独创建普通索引。因为即使加了索引，如果mysql发现<code>全表扫描</code>效率更高，可能会导致索引失效。</p><h3 id="_10-时间字段" tabindex="-1"><a class="header-anchor" href="#_10-时间字段" aria-hidden="true">#</a> 10.时间字段</h3><p><code>时间字段</code>的类型，我们可以选择的范围还是比较多的，目前mysql支持：date、datetime、timestamp、varchar等。</p><p><code>varchar</code>类型可能是为了跟接口保持一致，接口中的时间类型是String。</p><p>但如果哪天我们要通过时间范围查询数据，效率会非常低，因为这种情况没法走索引。</p><p><code>date</code>类型主要是为了保存<code>日期</code>，比如：2020-08-20，不适合保存<code>日期和时间</code>，比如：2020-08-20 12:12:20。</p><p>而<code>datetime</code>和<code>timestamp</code>类型更适合我们保存<code>日期和时间</code>。</p><p>但它们有略微区别。</p><ul><li><code>timestamp</code>：用4个字节来保存数据，它的取值范围为<code>1970-01-01 00:00:01</code> UTC ~ <code>2038-01-19 03:14:07</code>。此外，它还跟时区有关。</li><li><code>datetime</code>：用8个字节来保存数据，它的取值范围为<code>1000-01-01 00:00:00</code> ~ <code>9999-12-31 23:59:59</code>。它跟时区无关。</li></ul><p>优先推荐使用<code>datetime</code>类型保存日期和时间，可以保存的时间范围更大一些。</p><blockquote><p>温馨提醒一下，在给时间字段设置默认值是，建议不要设置成：<code>0000-00-00 00:00:00</code>，不然查询表时可能会因为转换不了，而直接报错。</p></blockquote><h3 id="_11-金额字段" tabindex="-1"><a class="header-anchor" href="#_11-金额字段" aria-hidden="true">#</a> 11.金额字段</h3><p>mysql中有多个字段可以表示浮点数：float、double、decimal等。</p><p>而<code>float</code>和<code>double</code>可能会丢失精度，因此推荐大家使用<code>decimal</code>类型保存金额。</p><p>一般我们是这样定义浮点数的：decimal(m,n)。</p><p>其中<code>n</code>是指<code>小数</code>的长度，而<code>m</code>是指<code>整数加小数</code>的总长度。</p><p>假如我们定义的金额类型是这样的：decimal(10,2)，则表示整数长度是8位，并且保留2位小数。</p><h3 id="_12-唯一索引" tabindex="-1"><a class="header-anchor" href="#_12-唯一索引" aria-hidden="true">#</a> 12.唯一索引</h3><p><code>唯一索引</code>在我们实际工作中，使用频率相当高。</p><p>你可以给单个字段，加唯一索引，比如：组织机构code。</p><p>也可以给多个字段，加一个联合的唯一索引，比如：分类编号、单位、规格等。</p><p>单个的唯一索引还好，但如果是联合的唯一索引，字段值出现null时，则唯一性约束可能会失效。</p><blockquote><p>创建唯一索引时，相关字段一定不能包含null值，否则唯一性会失效。</p></blockquote><h3 id="_13-字符集" tabindex="-1"><a class="header-anchor" href="#_13-字符集" aria-hidden="true">#</a> 13.字符集</h3><p>mysql中支持的<code>字符集</code>有很多，常用的有：latin1、utf-8、utf8mb4、GBK等。</p><p>这4种字符集情况如下：</p><table><thead><tr><th>字符集</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>GBK</td><td>2</td><td>支持中文，但不是国际通用字符集</td></tr><tr><td>UTF-8</td><td>3</td><td>支持中英文混合场景，是国际通用字符集</td></tr><tr><td>latin1</td><td>1</td><td>MySQL默认字符集</td></tr><tr><td>utf8mb4</td><td>4</td><td>完全兼容UTF-8，用四个字节储存更多的字符</td></tr></tbody></table><p><code>latin1</code>容易出现乱码问题，在实际项目中使用比较少。</p><p>而<code>GBK</code>支持中文，但不支持国际通用字符，在实际项目中使用也不多。</p><p>从目前来看，mysql的字符集使用最多的还是：<code>utf-8</code>和<code>utf8mb4</code>。</p><p>其中<code>utf-8</code>占用3个字节，比<code>utf8mb4</code>的4个字节，占用更小的存储空间。</p><p>但utf-8有个问题：即无法存储emoji表情，因为emoji表情一般需要4个字节。</p><p>由此，使用utf-8字符集，保存emoji表情时，数据库会直接报错。</p><p>所以，建议在建表时字符集设置成：<code>utf8mb4</code>，会省去很多不必要的麻烦。</p><h3 id="_14-排序规则" tabindex="-1"><a class="header-anchor" href="#_14-排序规则" aria-hidden="true">#</a> 14. 排序规则</h3><p>不知道，你关注过没，在mysql中创建表时，有个<code>COLLATE</code>参数可以设置。</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE TABLE \`order\` (
  \`id\` bigint NOT NULL AUTO_INCREMENT,
  \`code\` varchar(20) COLLATE utf8mb4_bin NOT NULL,
  \`name\` varchar(30) COLLATE utf8mb4_bin NOT NULL,
  PRIMARY KEY (\`id\`),
  UNIQUE KEY \`un_code\` (\`code\`),
  KEY \`un_code_name\` (\`code\`,\`name\`) USING BTREE,
  KEY \`idx_name\` (\`name\`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它是用来设置<code>排序规则</code>的。</p><p>字符排序规则跟字符集有关，比如：字符集如果是<code>utf8mb4</code>，则字符排序规则也是以：<code>utf8mb4_</code>开头的，常用的有：<code>utf8mb4_general_ci</code>、<code>utf8mb4_bin</code>等。</p><p>其中utf8mb4_general_ci排序规则，对字母的大小写不敏感。说得更直白一点，就是不区分大小写。</p><p>而utf8mb4_bin排序规则，对字符大小写敏感，也就是区分大小写。</p><p>说实话，这一点还是非常重要的。</p><p>假如order表中现在有一条记录，name的值是大写的YOYO，但我们用小写的yoyo去查，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from order where name=&#39;yoyo&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果字符排序规则是utf8mb4_general_ci，则可以查出大写的YOYO的那条数据。</p><p>如果字符排序规则是utf8mb4_bin，则查不出来。</p><p>由此，字符排序规则一定要根据实际的业务场景选择，否则容易出现问题。</p><h3 id="_15-大字段" tabindex="-1"><a class="header-anchor" href="#_15-大字段" aria-hidden="true">#</a> 15.大字段</h3><p>我们在创建表时，对一些特殊字段，要额外关注，比如：<code>大字段</code>，即占用较多存储空间的字段。</p><p>比如：用户的评论，这就属于一个大字段，但这个字段可长可短。</p><p>但一般会对评论的总长度做限制，比如：最多允许输入500个字符。</p><p>如果直接定义成<code>text</code>类型，可能会浪费存储空间，所以建议将这类字段定义成<code>varchar</code>类型的存储效率更高。</p><p>当然，我还见过更大的字段，即该字段直接保存合同数据。</p><p>一个合同可能会占<code>几Mb</code>。</p><p>在mysql中保存这种数据，从系统设计的角度来说，本身就不太合理。</p><p>像合同这种非常大的数据，可以保存到<code>mongodb</code>中，然后在mysql的业务表中，保存mongodb表的id。</p><hr><p>好了，以上就是今天的内容分享了，我们下篇见。</p>`,233);function h(y,w){const a=t("ExternalLinkIcon");return o(),c("div",null,[d,n("div",u,[r,n("p",null,[n("a",k,[s("MySQL 教程 | 菜鸟教程 (runoob.com)"),e(a)])]),n("p",null,[n("a",m,[s("MySQL :: Download MySQL Community Server"),e(a)])]),n("p",null,[n("a",v,[s("安装文档"),e(a)])])]),b])}const f=p(i,[["render",h],["__file","MySQL.html.vue"]]);export{f as default};
